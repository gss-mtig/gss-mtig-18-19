{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GeoServicios para Smarts Cities 2018-2019 Materiales para el curso sobre Geoservicios para Smart Cities (GSS) del M\u00e0ster Tecnologies de la Informaci\u00f3 Geografica de la UAB Temario: https://gss-mtig.github.io/gss-mtig-18-19/ Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData API servicios Open data (CKAN y SOCRATA) Conceptos Vector-Tiles Visualizaci\u00f3n con Kepler.gl Herramientas de visualizaci\u00f3n de datos Conceptos b\u00e1sicos de Geoservicios Consideraciones sobre servicios Open data Ejemplo servicio bicing Barcelona Ejemplo servicio bicing Barcelona (VectorTiles) Consideraciones sobre servicios de Sensores Ejemplo sensores port Barcelona Ejemplo Sentilo ACA Geoservicios realtime Herramientas de visualizaci\u00f3n geoservicios Ejemplo Mobility Ejemplo servicio realtime para compartir la ubicaci\u00f3n Ejemplo GTFS Autores Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Victor Pascual Ayats @sfggeogis , geostarter (ICGC) Condiciones de reutilizaci\u00f3n de estos apuntes Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional Usted es libre de: Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial. Bajo las condiciones siguientes: Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace. CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original. No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.","title":"Home"},{"location":"#geoservicios-para-smarts-cities-2018-2019","text":"Materiales para el curso sobre Geoservicios para Smart Cities (GSS) del M\u00e0ster Tecnologies de la Informaci\u00f3 Geografica de la UAB Temario:","title":"GeoServicios para Smarts Cities 2018-2019"},{"location":"#httpsgss-mtiggithubiogss-mtig-18-19","text":"Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData API servicios Open data (CKAN y SOCRATA) Conceptos Vector-Tiles Visualizaci\u00f3n con Kepler.gl Herramientas de visualizaci\u00f3n de datos Conceptos b\u00e1sicos de Geoservicios Consideraciones sobre servicios Open data Ejemplo servicio bicing Barcelona Ejemplo servicio bicing Barcelona (VectorTiles) Consideraciones sobre servicios de Sensores Ejemplo sensores port Barcelona Ejemplo Sentilo ACA Geoservicios realtime Herramientas de visualizaci\u00f3n geoservicios Ejemplo Mobility Ejemplo servicio realtime para compartir la ubicaci\u00f3n Ejemplo GTFS","title":"https://gss-mtig.github.io/gss-mtig-18-19/"},{"location":"#autores","text":"Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Victor Pascual Ayats @sfggeogis , geostarter (ICGC) Condiciones de reutilizaci\u00f3n de estos apuntes Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional Usted es libre de: Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial. Bajo las condiciones siguientes: Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace. CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original. No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.","title":"Autores"},{"location":"10_consideraciones_servicios_realtime_sensores/","text":"Consideraciones sobre servicios de Sensores Problemas frecuentes al trabajar con sensores Existe el estandar SOS de la OGC 1 , pero tiene poca implementaci\u00f3n, debido a que algunos de los fabricantes de sensores utilizan formatos propios, lo que dificulta la integraci\u00f3n de sensores de diferentes provedores en un s\u00f3lo sistema. Datos err\u00f3neos y falsos, ya sea por una mala lectura \u00f3 porque el sensor no est\u00e1 funcionando correctamente. No tenemos forma de saber si el dato es correcto. Ejemplo Ejemplo de buenas pr\u00e1cticas El servicio de datos sobre embalses ofrecidos por la ACA (Agencia Catalana del Agua) http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ . Es un ejemplo de buenas pr\u00e1cticas porque est\u00e1 bien documentado y contiene ejemplos. El acceso es libre y gratuito y tiene salida en un mapa para los ususarios que no sean desarrolladores. Ejemplo de salida http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=embassament Si bien el formato de salida es un JSON donde tiene una propiedad location no es un formato geogr\u00e1fico que podamos utilizar directamente para poner en un mapa, para ello tendr\u00edamos que hacer una transformaci\u00f3n hacia alg\u00fan formato geogr\u00e1fico tipo GeoJSON. Ejemplo de \"malas\" pr\u00e1cticas El servicio de la DIBA https://www.diba.cat/es/web/smartregion/premis-apps-iot-for-citizens/obtenir-acces-a-sentilo-diba ya que para acceder a los servicios es necesaria una API Key y para obtenerla hay que enviar un email con nuestros datos y el motivo de uso. El simple hecho de tener que registrarse ya es una barrera. El acceso a la aplicaci\u00f3n http://sentilo.diba.cat/sentilo-catalog-web/ no es f\u00e1cil de encontrar y no hay ninguna documentaci\u00f3n. Referencias http://www.opengeospatial.org/standards/sos","title":"10. Consideraciones sobre servicios de Sensores"},{"location":"10_consideraciones_servicios_realtime_sensores/#consideraciones-sobre-servicios-de-sensores","text":"","title":"Consideraciones sobre servicios de Sensores"},{"location":"10_consideraciones_servicios_realtime_sensores/#problemas-frecuentes-al-trabajar-con-sensores","text":"Existe el estandar SOS de la OGC 1 , pero tiene poca implementaci\u00f3n, debido a que algunos de los fabricantes de sensores utilizan formatos propios, lo que dificulta la integraci\u00f3n de sensores de diferentes provedores en un s\u00f3lo sistema. Datos err\u00f3neos y falsos, ya sea por una mala lectura \u00f3 porque el sensor no est\u00e1 funcionando correctamente. No tenemos forma de saber si el dato es correcto. Ejemplo","title":"Problemas frecuentes al trabajar con sensores"},{"location":"10_consideraciones_servicios_realtime_sensores/#ejemplo-de-buenas-practicas","text":"El servicio de datos sobre embalses ofrecidos por la ACA (Agencia Catalana del Agua) http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ . Es un ejemplo de buenas pr\u00e1cticas porque est\u00e1 bien documentado y contiene ejemplos. El acceso es libre y gratuito y tiene salida en un mapa para los ususarios que no sean desarrolladores. Ejemplo de salida http://aca-web.gencat.cat/sdim2/apirest/catalog?componentType=embassament Si bien el formato de salida es un JSON donde tiene una propiedad location no es un formato geogr\u00e1fico que podamos utilizar directamente para poner en un mapa, para ello tendr\u00edamos que hacer una transformaci\u00f3n hacia alg\u00fan formato geogr\u00e1fico tipo GeoJSON.","title":"Ejemplo de buenas pr\u00e1cticas"},{"location":"10_consideraciones_servicios_realtime_sensores/#ejemplo-de-malas-practicas","text":"El servicio de la DIBA https://www.diba.cat/es/web/smartregion/premis-apps-iot-for-citizens/obtenir-acces-a-sentilo-diba ya que para acceder a los servicios es necesaria una API Key y para obtenerla hay que enviar un email con nuestros datos y el motivo de uso. El simple hecho de tener que registrarse ya es una barrera. El acceso a la aplicaci\u00f3n http://sentilo.diba.cat/sentilo-catalog-web/ no es f\u00e1cil de encontrar y no hay ninguna documentaci\u00f3n.","title":"Ejemplo de \"malas\" pr\u00e1cticas"},{"location":"10_consideraciones_servicios_realtime_sensores/#referencias","text":"http://www.opengeospatial.org/standards/sos","title":"Referencias"},{"location":"11_ejemplo_sensores_port_bcn/","text":"Ejemplo sensores port Barcelona Acceso al servicio de datos de sensores del Port de Barcelona En el portal de sensores del Port de Barcelona 1 podemos encontrar una serie de componentes gr\u00e1ficos o widgets que permiten acceder a los datos de los diferentes sensores SOS 2 . Tambi\u00e9n podemos acceder directamente al servicio http://sensors.portdebarcelona.cat/sos/json si queremos implementar nuestros propios componentes o procesar los datos directamente. En la documentaci\u00f3n del servicio vemos que estos widgets implementan un cliente SOS que soporta la versi\u00f3n 2.0 de est\u00e1ndard. Los widgets necesitan un endpoint en formato JSON. Lo cual resulta no ser un requisito del est\u00e1ndar si no una funcionalidad opcional que proporciona la implementaci\u00f3n del servidor SOS de 52 north en su versi\u00f3n 4.0.0 o superior. La ventaja de utilizar los widgets es que proporcionan una capa de abstracci\u00f3n que hace el \"trabajo sucio\" y evita trabajar directamente con el servicio. La implementaci\u00f3n de los widgets es open source 3 y extensible, lo que permite poder desarrollar nuestros propios widgets. Creaci\u00f3n de un visor Para crear un visor de mapas utilizaremos el widget de Mapa 4 que est\u00e1 basado en la librer\u00eda de mapas Leaflet. 5 Crear una carpeta con el nombre de visor-port . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [], properties : [] }, document . getElementById ( map-container )); / script / body / html Abrir el archivo index.html en el navegador para confirmar que carga un mapa del mundo. Este mapa no contiene ninguna informaci\u00f3n. Agregar algunas features (sensores) en la matriz de features. Para obtenter las features tendr\u00edamos que hacer una petici\u00f3n de GetFeatureOfInterest 6 . Para agregar algunos elementos en el mapa reemplazar la propiedad features por lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [] }, document . getElementById ( map-container )); / script / body / html Recargar el mapa y confirmar que aparecen unos puntos en el puerto de Barcelona. Agregar propiedades a los sensores. Ya tenemos algunos sensores en nuestro mapa pero no tenemos datos asociados a los mismos. Para ello indicar que propiedades queremos observar. Esto lo indicaremos en la matriz de properties de nuestro mapa. Agregar las siguientes propiedades para ver la temperatura 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], }, document . getElementById ( map-container )); / script / body / html Recargar el mapa y pasar el cursor sobre alg\u00fan elemento para ver que se despliega un panel con las temperaturas. Combinar varios widgets en la aplicaci\u00f3n. Mostar un popup con un widget al hacer click sobre un elemento. Utilizar la opci\u00f3n popup_widget del mapa. Cargar un widget de tipo serie de tiempo con las temperaturas. Escribir justo debajo de las propertities lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], popup_widget : { name : timechart , title : Temperatures , properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], time_start : 2015-09-03T05:05:40Z , time_end : 2015-09-03T08:05:40Z } }, document . getElementById ( map-container )); / script / body / html Recargar la p\u00e1gina y clicar sobre un elemento para ver un popup con la serie temporal de las temperaturas. Mostrar un widget en un div fuera del mapa al hacer click sobre un elemento. Escribir justo debajo de donde declaramos el div del mapa lo siguiente 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], popup_widget : { name : timechart , title : Temperatures , properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], time_start : 2015-09-03T05:05:40Z , time_end : 2015-09-03T08:05:40Z } }, document . getElementById ( map-container )); / script / body / html Crear un nuevo estilo para este div. Escibir en nuestro apartado de estilo css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], popup_widget : { name : timechart , title : Temperatures , properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], time_start : 2015-09-03T05:05:40Z , time_end : 2015-09-03T08:05:40Z } }, document . getElementById ( map-container )); / script / body / html Quitar la opci\u00f3n de popup_widget del mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 !DOCTYPE html html head title Sensores Port de Barcelona /title style #map-container { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } #info-container { position: absolute; top: 0; left: 0; width: 200px ; z-index: 9000; background-color: rgba(255,255,255,0.7); } /style /head body div id= map-container /div div id= info-container /div script src= http://sensors.fonts.cat/js/SensorWidgets.js /script script type= text/javascript SensorWidget( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true, features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], - popup_widget : { - name : timechart , - title : Temperatures , - properties : [ - http://sensors.portdebarcelona.cat/def/weather/properties#32M , - http://sensors.portdebarcelona.cat/def/weather/properties#32 , - http://sensors.portdebarcelona.cat/def/weather/properties#32N - ], - time_start : 2015-09-03T05:05:40Z , - time_end : 2015-09-03T08:05:40Z - } }, document.getElementById( map-container )); /script /body /html Utilizar la opci\u00f3n de on_click del mapa. Esta opci\u00f3n permite definir una funci\u00f3n que se ejecuta al hacer click sobre un elemento del mapa. Copiar debajo de las properties lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], on_click : function ( el ){ console . log ( el ); } }, document . getElementById ( map-container )); / script / body / html Recargar la p\u00e1gina y clicar sobre un elemento. Abrir la consola de desarrollador para ver que aparece la informaci\u00f3n del elemento clicado. Crear una funci\u00f3n que recibe como par\u00e1metro el id de un elemento y crea un widget de tipo term\u00f3metro. Escribir antes de donde se cierra el tag de script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], on_click : function ( el ){ console . log ( el ); } }, document . getElementById ( map-container )); function showTermometro ( feature_id ){ SensorWidget ( thermometer , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , feature : feature_id , property : http://sensors.portdebarcelona.cat/def/weather/properties#32 , refresh_interval : 120 , footnote : A sample footnote for Thermometer widget }, document . getElementById ( info-container )); } / script / body / html Llamar a la nueva funci\u00f3n showTermometro dentro de la funci\u00f3n del on_click . Escribir luego del console.log 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], on_click : function ( el ){ console . log ( el ); showTermometro ( el . feature . id ); } }, document . getElementById ( map-container )); function showTermometro ( feature_id ){ SensorWidget ( thermometer , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , feature : feature_id , property : http://sensors.portdebarcelona.cat/def/weather/properties#32 , refresh_interval : 120 , footnote : A sample footnote for Thermometer widget }, document . getElementById ( info-container )); } / script / body / html Recargar el mapa y clicar sobre un elemento para ver como se desplega el widget del term\u00f3metro con la temperatura actual. mapa de sensores del port de barcelona Ejercicio Crear una funci\u00f3n para mostrar el widget de man\u00f3metro en lugar del term\u00f3metro. Llamar esta nueva funci\u00f3n al hacer click sobre un sensor. En el siguiente enlace se pueden ver las diferentes opciones http://sensors.portdebarcelona.cat/?lang=es#gauge Referencias http://sensors.portdebarcelona.cat/?lang=es http://sensor-widgets.readthedocs.io/es/latest/sos.html https://github.com/oscarfonts/sensor-widgets http://sensor-widgets.readthedocs.io/es/latest/widgets.html#mapa-map http://leafletjs.com/ http://sensor-widgets.readthedocs.io/es/latest/sos.html#getfeatureofinterest","title":"11. Ejemplo sensores port Barcelona"},{"location":"11_ejemplo_sensores_port_bcn/#ejemplo-sensores-port-barcelona","text":"","title":"Ejemplo sensores port Barcelona"},{"location":"11_ejemplo_sensores_port_bcn/#acceso-al-servicio-de-datos-de-sensores-del-port-de-barcelona","text":"En el portal de sensores del Port de Barcelona 1 podemos encontrar una serie de componentes gr\u00e1ficos o widgets que permiten acceder a los datos de los diferentes sensores SOS 2 . Tambi\u00e9n podemos acceder directamente al servicio http://sensors.portdebarcelona.cat/sos/json si queremos implementar nuestros propios componentes o procesar los datos directamente. En la documentaci\u00f3n del servicio vemos que estos widgets implementan un cliente SOS que soporta la versi\u00f3n 2.0 de est\u00e1ndard. Los widgets necesitan un endpoint en formato JSON. Lo cual resulta no ser un requisito del est\u00e1ndar si no una funcionalidad opcional que proporciona la implementaci\u00f3n del servidor SOS de 52 north en su versi\u00f3n 4.0.0 o superior. La ventaja de utilizar los widgets es que proporcionan una capa de abstracci\u00f3n que hace el \"trabajo sucio\" y evita trabajar directamente con el servicio. La implementaci\u00f3n de los widgets es open source 3 y extensible, lo que permite poder desarrollar nuestros propios widgets.","title":"Acceso al servicio de datos de sensores del Port de Barcelona"},{"location":"11_ejemplo_sensores_port_bcn/#creacion-de-un-visor","text":"Para crear un visor de mapas utilizaremos el widget de Mapa 4 que est\u00e1 basado en la librer\u00eda de mapas Leaflet. 5 Crear una carpeta con el nombre de visor-port . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [], properties : [] }, document . getElementById ( map-container )); / script / body / html Abrir el archivo index.html en el navegador para confirmar que carga un mapa del mundo. Este mapa no contiene ninguna informaci\u00f3n. Agregar algunas features (sensores) en la matriz de features. Para obtenter las features tendr\u00edamos que hacer una petici\u00f3n de GetFeatureOfInterest 6 . Para agregar algunos elementos en el mapa reemplazar la propiedad features por lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [] }, document . getElementById ( map-container )); / script / body / html Recargar el mapa y confirmar que aparecen unos puntos en el puerto de Barcelona. Agregar propiedades a los sensores. Ya tenemos algunos sensores en nuestro mapa pero no tenemos datos asociados a los mismos. Para ello indicar que propiedades queremos observar. Esto lo indicaremos en la matriz de properties de nuestro mapa. Agregar las siguientes propiedades para ver la temperatura 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], }, document . getElementById ( map-container )); / script / body / html Recargar el mapa y pasar el cursor sobre alg\u00fan elemento para ver que se despliega un panel con las temperaturas. Combinar varios widgets en la aplicaci\u00f3n. Mostar un popup con un widget al hacer click sobre un elemento. Utilizar la opci\u00f3n popup_widget del mapa. Cargar un widget de tipo serie de tiempo con las temperaturas. Escribir justo debajo de las propertities lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], popup_widget : { name : timechart , title : Temperatures , properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], time_start : 2015-09-03T05:05:40Z , time_end : 2015-09-03T08:05:40Z } }, document . getElementById ( map-container )); / script / body / html Recargar la p\u00e1gina y clicar sobre un elemento para ver un popup con la serie temporal de las temperaturas. Mostrar un widget en un div fuera del mapa al hacer click sobre un elemento. Escribir justo debajo de donde declaramos el div del mapa lo siguiente 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], popup_widget : { name : timechart , title : Temperatures , properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], time_start : 2015-09-03T05:05:40Z , time_end : 2015-09-03T08:05:40Z } }, document . getElementById ( map-container )); / script / body / html Crear un nuevo estilo para este div. Escibir en nuestro apartado de estilo css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], popup_widget : { name : timechart , title : Temperatures , properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], time_start : 2015-09-03T05:05:40Z , time_end : 2015-09-03T08:05:40Z } }, document . getElementById ( map-container )); / script / body / html Quitar la opci\u00f3n de popup_widget del mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 !DOCTYPE html html head title Sensores Port de Barcelona /title style #map-container { position: absolute; top: 0; left: 0; bottom: 0; right: 0; } #info-container { position: absolute; top: 0; left: 0; width: 200px ; z-index: 9000; background-color: rgba(255,255,255,0.7); } /style /head body div id= map-container /div div id= info-container /div script src= http://sensors.fonts.cat/js/SensorWidgets.js /script script type= text/javascript SensorWidget( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true, features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], - popup_widget : { - name : timechart , - title : Temperatures , - properties : [ - http://sensors.portdebarcelona.cat/def/weather/properties#32M , - http://sensors.portdebarcelona.cat/def/weather/properties#32 , - http://sensors.portdebarcelona.cat/def/weather/properties#32N - ], - time_start : 2015-09-03T05:05:40Z , - time_end : 2015-09-03T08:05:40Z - } }, document.getElementById( map-container )); /script /body /html Utilizar la opci\u00f3n de on_click del mapa. Esta opci\u00f3n permite definir una funci\u00f3n que se ejecuta al hacer click sobre un elemento del mapa. Copiar debajo de las properties lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], on_click : function ( el ){ console . log ( el ); } }, document . getElementById ( map-container )); / script / body / html Recargar la p\u00e1gina y clicar sobre un elemento. Abrir la consola de desarrollador para ver que aparece la informaci\u00f3n del elemento clicado. Crear una funci\u00f3n que recibe como par\u00e1metro el id de un elemento y crea un widget de tipo term\u00f3metro. Escribir antes de donde se cierra el tag de script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], on_click : function ( el ){ console . log ( el ); } }, document . getElementById ( map-container )); function showTermometro ( feature_id ){ SensorWidget ( thermometer , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , feature : feature_id , property : http://sensors.portdebarcelona.cat/def/weather/properties#32 , refresh_interval : 120 , footnote : A sample footnote for Thermometer widget }, document . getElementById ( info-container )); } / script / body / html Llamar a la nueva funci\u00f3n showTermometro dentro de la funci\u00f3n del on_click . Escribir luego del console.log 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 !DOCTYPE html html head title Sensores Port de Barcelona / title style # map-container { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } # info-container { position : absolute ; top : 0 ; left : 0 ; width : 200px ; z-index : 9000 ; background-color : rgba ( 255 , 255 , 255 , 0.7 ); } / style / head body div id = map-container / div div id = info-container / div script src = http://sensors.fonts.cat/js/SensorWidgets.js / script script type = text/javascript SensorWidget ( map , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , swap_axis : true , features : [ http://sensors.portdebarcelona.cat/def/weather/features#01 , http://sensors.portdebarcelona.cat/def/weather/features#02 , http://sensors.portdebarcelona.cat/def/weather/features#03 , http://sensors.portdebarcelona.cat/def/weather/features#P4 , http://sensors.portdebarcelona.cat/def/weather/features#10 , http://sensors.portdebarcelona.cat/def/weather/features#P5 , http://sensors.portdebarcelona.cat/def/weather/features#P6 ], properties : [ http://sensors.portdebarcelona.cat/def/weather/properties#32M , http://sensors.portdebarcelona.cat/def/weather/properties#32 , http://sensors.portdebarcelona.cat/def/weather/properties#32N ], on_click : function ( el ){ console . log ( el ); showTermometro ( el . feature . id ); } }, document . getElementById ( map-container )); function showTermometro ( feature_id ){ SensorWidget ( thermometer , { service : http://sensors.portdebarcelona.cat/sos/json , offering : http://sensors.portdebarcelona.cat/def/weather/offerings#30m , feature : feature_id , property : http://sensors.portdebarcelona.cat/def/weather/properties#32 , refresh_interval : 120 , footnote : A sample footnote for Thermometer widget }, document . getElementById ( info-container )); } / script / body / html Recargar el mapa y clicar sobre un elemento para ver como se desplega el widget del term\u00f3metro con la temperatura actual. mapa de sensores del port de barcelona Ejercicio Crear una funci\u00f3n para mostrar el widget de man\u00f3metro en lugar del term\u00f3metro. Llamar esta nueva funci\u00f3n al hacer click sobre un sensor. En el siguiente enlace se pueden ver las diferentes opciones http://sensors.portdebarcelona.cat/?lang=es#gauge","title":"Creaci\u00f3n de un visor"},{"location":"11_ejemplo_sensores_port_bcn/#referencias","text":"http://sensors.portdebarcelona.cat/?lang=es http://sensor-widgets.readthedocs.io/es/latest/sos.html https://github.com/oscarfonts/sensor-widgets http://sensor-widgets.readthedocs.io/es/latest/widgets.html#mapa-map http://leafletjs.com/ http://sensor-widgets.readthedocs.io/es/latest/sos.html#getfeatureofinterest","title":"Referencias"},{"location":"12_ejemplo_sentilo_aca/","text":"Ejemplo Sentilo ACA Acceso al servicio de sensores Sentilo de la ACA En el apartado de consulta de datos de la p\u00e1gina de la ACA 1 encontraremos un subapartado de datos en tiempo real, estos datos los sirven utilizando la plataforma de sensores Sentilo 2 . Los sensores dan informaci\u00f3n sobre los diferentes embalses/pantanos que hay en Catalu\u00f1a. La p\u00e1gina tiene un acceso a un mapa con los datos de los diferentes sensores 3 este mapa es el que ofrece la plataforma de Sentilo y est\u00e1 basado en tecnolog\u00eda de Google Maps. Tambi\u00e9n encontraremos la documentaci\u00f3n 4 para usar la API, lo que nos permite acceder a los datos y generar nuestro propio visor. Creaci\u00f3n de un visor Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 5 . Crear una carpeta con el nombre de visor-aca . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Catalu\u00f1a. Consultar la documentaci\u00f3n de la API y buscar la url de descripci\u00f3n del servicio que es http://aca-web.gencat.cat/sdim2/apirest/catalog . Abrir esta url en el navegador y confirmar que responde un JSON con la informaci\u00f3n de los diferentes sensores. Revisar el JSON de salida y buscar la propiedad location que indica las coordenadas de la ubicaci\u00f3n del sensor. A pesar de que el JSON tiene coordenadas no es un GeoJSON y por lo tanto no lo podemos pintar autom\u00e1ticamente en nuestro mapa. Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Utilizar el plugin para agregar la capa al mapa llamando a la API de la ACA. Agregar lo siguiente al final de nuestro c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://aca-web.gencat.cat/sdim2/apirest/catalog ). addTo ( map ); / script / body / html Recargar la p\u00e1gina y confirmar que no aparece ninguna informaci\u00f3n en el mapa. Abrir la consola de desarrollador del navegador (Ctrl+F12) para ver que aparece un mensaje de error XMLHttpRequest cannot load ... ello es debido a que estamos llamando a un servicio que no est\u00e1 en nuestro dominio y por lo tanto da un error de CORS 7 . Para evitar el error de CORS necesitamos un proxy 8 en nuestro servidor web que pueda hacer la llamada al servicio de la ACA y que nos devuelva el contenido. Creaci\u00f3n del proxy Instalar Node.js 9 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir 1 node -v Navegar hasta nuestra carpeta visor-aca y escribir: 1 npm init Con este comando estaremos creando el archivo package.json , el cual solicita varios elementos como por ejemplo; el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 10 como servidor web y el m\u00f3dulo http-proxy 11 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el http-proxy y guardarlo en la lista de dependencias 1 npm install http-proxy --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de la ACA. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverAca = http://aca-web.gencat.cat/sdim2/apirest/catalog ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /aca/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: 1 node app.js Abrir la url de nuestro proxy http://localhost:3000/aca/ en el navegador. Escribir en el navegador http://localhost:3000 y ver nuestro mapa. Modificar el mapa Modificar el archivo index.html para que llame al proxy que hemos creado. Cambiar la url de la capa geojsonLayer http://aca-web.gencat.cat/sdim2/apirest/catalog por nuestro proxy http://localhost:3000/aca/ (como el proxy y la aplicaci\u00f3n est\u00e1n en el mismo servidor podr\u00edamos usar /aca/ ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ ). addTo ( map ); / script / body / html Recargar la aplicaci\u00f3n con Ctrl+F5 y vemos que el error ha desaparecido. Continuaremos sin ver ning\u00fan dato en nuestro mapa. Esto es debido a lo que ya mencionamos; que la API no retorna un GeoJSON. Por lo tanto tendremos que convertir la respuesta de la API en un GeoJSON. Convertir la respuesta en un GeoJSON utilizando la opci\u00f3n middleware que ofrece la capa GeoJSON.AJAX. Esta opci\u00f3n permite crear una funcion donde se pueden manipular los datos antes de agregarlos al mapa. Crear la funci\u00f3n que transforma los datos de Sentilo de la ACA en un GeoJSON. Escribir al final de nuestro c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ ). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } / script / body / html Modficar la capa geojsonLayer para que el middleware llame a nuestra funci\u00f3n de transformaci\u00f3n. Cambiar el c\u00f3digo de la capa por lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } / script / body / html Recargar el mapa y ver los puntos de los embalses en el mapa. Mostrar la informaci\u00f3n del punto. Agregar el evento click en cada unos de los puntos. Utilizar la opci\u00f3n de onEachFeature que ofrece las capa GeoJSON de Leaflet. Esta opci\u00f3n permite ejecutar una funci\u00f3n en la creaci\u00f3n de cada uno de los elementos de la capa. Es muy \u00fatil para agregar popups a los elementos \u00f3 para agregar eventos en los elementos. Crear una funci\u00f3n llamada eachFeature que recibe como par\u00e1metros un feature (elemento del GeoJSON) y un layer (elemento de Leaflet). La funci\u00f3n ser\u00eda la siguiente 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ console . log ( f ); console . log ( l ); }); } / script / body / html Llamar a la funcion eachFeature en la opci\u00f3n onEachFeature de la capa geojsonLayer. Escribir lo siguiente luego de la opci\u00f3n del middleware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ console . log ( f ); console . log ( l ); }); } / script / body / html Recargar el mapa y hacer click sobre un elemento. En la consola de desarrollador ver que aparecen 2 entradas una que corresponde al feature y otra al layer. Llamar a la API de la ACA para pedir la \u00faltima lectura del sensor y as\u00ed obtener la informaci\u00f3n. La url para obtener la \u00faltima lectura es http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST . . /lastOb/. Por ejemplo: http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.082687-001/lastOb/ Como estamos llamando una url que est\u00e1 fuera de nuestro dominio tenemos el mismo problema de CORS. Modificar el proxy Modificar nuestro proxy para obtener la informaci\u00f3n de un sensor. Escribir en nuestro archivo app.js justo debajo de la declaraci\u00f3n de la variable serverAca 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverAca = http://aca-web.gencat.cat/sdim2/apirest/catalog ; var serverAcaLastOb = http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST. ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /aca/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Agregar justo antes del app.listen el c\u00f3digo que nos va a ser de proxy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverAca = http://aca-web.gencat.cat/sdim2/apirest/catalog ; var serverAcaLastOb = http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST. ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /aca/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . all ( /acalast/:id , function ( req , res ){ console . log ( redirecting to Server2 + req . params . id ); apiProxy . web ( req , res , { target : serverAcaLastOb + req . params . id + /lastOb/ , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/acalast/082687-001 en el navegador para comprobar que el proxy est\u00e1 funcionando correctamente. Modificar la funci\u00f3n que se llama al hacer click sobre un elemento del mapa para que llame a nuestro proxy. Esta funci\u00f3n ejecutar\u00e1 una llamada ajax al proxy. Modificar la funci\u00f3n eachFeature con el siguiente c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ var url = http://localhost:3000/acalast/ + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } / script / body / html Recargar el mapa y hacer click sobre un elemento para ver que en la consola del desarrollador aparece un objeto que contiene la respuesa del sensor con la informaci\u00f3n de la \u00faltima lectura. Crear una funci\u00f3n llamada popUp para mostrar esta informaci\u00f3n en el mapa. La funci\u00f3n recibe como par\u00e1metros un layer de Leaflet y unos datos del sensor. Esta funci\u00f3n muestra un popup asociado al elemento con la informaci\u00f3n del sensor. Escribir despu\u00e9s de la funci\u00f3n eachFeature 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ var url = http://localhost:3000/acalast/ + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( strong + data . componentDesc + /strong ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i = 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + : + observ . value + + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( br / )). togglePopup (); } / script / body / html Llamar a la funci\u00f3n popUp dentro de la funci\u00f3n que se llama en el success de la llamada ajax. Escribir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ var url = http://localhost:3000/acalast/ + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ popUp ( l , data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( strong + data . componentDesc + /strong ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i = 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + : + observ . value + + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( br / )). togglePopup (); } / script / body / html Recargar la aplicaci\u00f3n y clicar sobre un elemento. Debe aparecer un popup con la informaci\u00f3n de la \u00faltima lectura del sensor. ejemplo sentilo ACA Referencias http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ http://www.sentilo.io/wordpress/ http://aca-web.gencat.cat/sentilo-catalog-web/component/map http://aca.gencat.cat/web/.content/20_Aigua/08_consulta_de_dades/01_dades_obertes/us_serveis_dades_API_REST.pdf http://leafletjs.com/ https://github.com/calvinmetcalf/leaflet-ajax https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS https://es.wikipedia.org/wiki/Servidor_proxy https://nodejs.org/es/ http://expressjs.com/ https://github.com/nodejitsu/node-http-proxy","title":"12. Ejemplo Sentilo ACA"},{"location":"12_ejemplo_sentilo_aca/#ejemplo-sentilo-aca","text":"","title":"Ejemplo Sentilo ACA"},{"location":"12_ejemplo_sentilo_aca/#acceso-al-servicio-de-sensores-sentilo-de-la-aca","text":"En el apartado de consulta de datos de la p\u00e1gina de la ACA 1 encontraremos un subapartado de datos en tiempo real, estos datos los sirven utilizando la plataforma de sensores Sentilo 2 . Los sensores dan informaci\u00f3n sobre los diferentes embalses/pantanos que hay en Catalu\u00f1a. La p\u00e1gina tiene un acceso a un mapa con los datos de los diferentes sensores 3 este mapa es el que ofrece la plataforma de Sentilo y est\u00e1 basado en tecnolog\u00eda de Google Maps. Tambi\u00e9n encontraremos la documentaci\u00f3n 4 para usar la API, lo que nos permite acceder a los datos y generar nuestro propio visor.","title":"Acceso al servicio de sensores Sentilo de la ACA"},{"location":"12_ejemplo_sentilo_aca/#creacion-de-un-visor","text":"Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 5 . Crear una carpeta con el nombre de visor-aca . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Catalu\u00f1a. Consultar la documentaci\u00f3n de la API y buscar la url de descripci\u00f3n del servicio que es http://aca-web.gencat.cat/sdim2/apirest/catalog . Abrir esta url en el navegador y confirmar que responde un JSON con la informaci\u00f3n de los diferentes sensores. Revisar el JSON de salida y buscar la propiedad location que indica las coordenadas de la ubicaci\u00f3n del sensor. A pesar de que el JSON tiene coordenadas no es un GeoJSON y por lo tanto no lo podemos pintar autom\u00e1ticamente en nuestro mapa. Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Utilizar el plugin para agregar la capa al mapa llamando a la API de la ACA. Agregar lo siguiente al final de nuestro c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://aca-web.gencat.cat/sdim2/apirest/catalog ). addTo ( map ); / script / body / html Recargar la p\u00e1gina y confirmar que no aparece ninguna informaci\u00f3n en el mapa. Abrir la consola de desarrollador del navegador (Ctrl+F12) para ver que aparece un mensaje de error XMLHttpRequest cannot load ... ello es debido a que estamos llamando a un servicio que no est\u00e1 en nuestro dominio y por lo tanto da un error de CORS 7 . Para evitar el error de CORS necesitamos un proxy 8 en nuestro servidor web que pueda hacer la llamada al servicio de la ACA y que nos devuelva el contenido.","title":"Creaci\u00f3n de un visor"},{"location":"12_ejemplo_sentilo_aca/#creacion-del-proxy","text":"Instalar Node.js 9 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir 1 node -v Navegar hasta nuestra carpeta visor-aca y escribir: 1 npm init Con este comando estaremos creando el archivo package.json , el cual solicita varios elementos como por ejemplo; el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 10 como servidor web y el m\u00f3dulo http-proxy 11 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el http-proxy y guardarlo en la lista de dependencias 1 npm install http-proxy --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de la ACA. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverAca = http://aca-web.gencat.cat/sdim2/apirest/catalog ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /aca/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: 1 node app.js Abrir la url de nuestro proxy http://localhost:3000/aca/ en el navegador. Escribir en el navegador http://localhost:3000 y ver nuestro mapa.","title":"Creaci\u00f3n del proxy"},{"location":"12_ejemplo_sentilo_aca/#modificar-el-mapa","text":"Modificar el archivo index.html para que llame al proxy que hemos creado. Cambiar la url de la capa geojsonLayer http://aca-web.gencat.cat/sdim2/apirest/catalog por nuestro proxy http://localhost:3000/aca/ (como el proxy y la aplicaci\u00f3n est\u00e1n en el mismo servidor podr\u00edamos usar /aca/ ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ ). addTo ( map ); / script / body / html Recargar la aplicaci\u00f3n con Ctrl+F5 y vemos que el error ha desaparecido. Continuaremos sin ver ning\u00fan dato en nuestro mapa. Esto es debido a lo que ya mencionamos; que la API no retorna un GeoJSON. Por lo tanto tendremos que convertir la respuesta de la API en un GeoJSON. Convertir la respuesta en un GeoJSON utilizando la opci\u00f3n middleware que ofrece la capa GeoJSON.AJAX. Esta opci\u00f3n permite crear una funcion donde se pueden manipular los datos antes de agregarlos al mapa. Crear la funci\u00f3n que transforma los datos de Sentilo de la ACA en un GeoJSON. Escribir al final de nuestro c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ ). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } / script / body / html Modficar la capa geojsonLayer para que el middleware llame a nuestra funci\u00f3n de transformaci\u00f3n. Cambiar el c\u00f3digo de la capa por lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } / script / body / html Recargar el mapa y ver los puntos de los embalses en el mapa. Mostrar la informaci\u00f3n del punto. Agregar el evento click en cada unos de los puntos. Utilizar la opci\u00f3n de onEachFeature que ofrece las capa GeoJSON de Leaflet. Esta opci\u00f3n permite ejecutar una funci\u00f3n en la creaci\u00f3n de cada uno de los elementos de la capa. Es muy \u00fatil para agregar popups a los elementos \u00f3 para agregar eventos en los elementos. Crear una funci\u00f3n llamada eachFeature que recibe como par\u00e1metros un feature (elemento del GeoJSON) y un layer (elemento de Leaflet). La funci\u00f3n ser\u00eda la siguiente 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ console . log ( f ); console . log ( l ); }); } / script / body / html Llamar a la funcion eachFeature en la opci\u00f3n onEachFeature de la capa geojsonLayer. Escribir lo siguiente luego de la opci\u00f3n del middleware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ console . log ( f ); console . log ( l ); }); } / script / body / html Recargar el mapa y hacer click sobre un elemento. En la consola de desarrollador ver que aparecen 2 entradas una que corresponde al feature y otra al layer. Llamar a la API de la ACA para pedir la \u00faltima lectura del sensor y as\u00ed obtener la informaci\u00f3n. La url para obtener la \u00faltima lectura es http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST . . /lastOb/. Por ejemplo: http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST.082687-001/lastOb/ Como estamos llamando una url que est\u00e1 fuera de nuestro dominio tenemos el mismo problema de CORS.","title":"Modificar el mapa"},{"location":"12_ejemplo_sentilo_aca/#modificar-el-proxy","text":"Modificar nuestro proxy para obtener la informaci\u00f3n de un sensor. Escribir en nuestro archivo app.js justo debajo de la declaraci\u00f3n de la variable serverAca 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverAca = http://aca-web.gencat.cat/sdim2/apirest/catalog ; var serverAcaLastOb = http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST. ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /aca/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Agregar justo antes del app.listen el c\u00f3digo que nos va a ser de proxy. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverAca = http://aca-web.gencat.cat/sdim2/apirest/catalog ; var serverAcaLastOb = http://aca-web.gencat.cat/sentilo-catalog-web/component/map/EMBASSAMENT-EST. ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /aca/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverAca , changeOrigin : false , ignorePath : true }); }); app . all ( /acalast/:id , function ( req , res ){ console . log ( redirecting to Server2 + req . params . id ); apiProxy . web ( req , res , { target : serverAcaLastOb + req . params . id + /lastOb/ , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/acalast/082687-001 en el navegador para comprobar que el proxy est\u00e1 funcionando correctamente. Modificar la funci\u00f3n que se llama al hacer click sobre un elemento del mapa para que llame a nuestro proxy. Esta funci\u00f3n ejecutar\u00e1 una llamada ajax al proxy. Modificar la funci\u00f3n eachFeature con el siguiente c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ var url = http://localhost:3000/acalast/ + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } / script / body / html Recargar el mapa y hacer click sobre un elemento para ver que en la consola del desarrollador aparece un objeto que contiene la respuesa del sensor con la informaci\u00f3n de la \u00faltima lectura. Crear una funci\u00f3n llamada popUp para mostrar esta informaci\u00f3n en el mapa. La funci\u00f3n recibe como par\u00e1metros un layer de Leaflet y unos datos del sensor. Esta funci\u00f3n muestra un popup asociado al elemento con la informaci\u00f3n del sensor. Escribir despu\u00e9s de la funci\u00f3n eachFeature 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ var url = http://localhost:3000/acalast/ + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ console . log ( data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( strong + data . componentDesc + /strong ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i = 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + : + observ . value + + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( br / )). togglePopup (); } / script / body / html Llamar a la funci\u00f3n popUp dentro de la funci\u00f3n que se llama en el success de la llamada ajax. Escribir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Sentilo ACA / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 41.5087 , 2.1777 ], 8 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( http://localhost:3000/aca/ , { middleware : function ( data ){ return sentiloAca2geoJSON ( data ); } , onEachFeature : eachFeature }). addTo ( map ); function sentiloAca2geoJSON ( data ){ var geojson = { type : FeatureCollection , features : [] }; var sensors = data . providers [ 0 ]. sensors ; for ( var i = sensors . length - 1 ; i = 0 ; i -- ) { var sensor = sensors [ i ]; var location = sensor . location . split ( ); var feature = { type : Feature , properties : { description : sensor . description , id : sensor . component , nom : sensor . componentDesc , info : sensor . componentAdditionalInfo , unit : sensor . unit }, geometry : { type : Point , coordinates : [ location [ 1 ], location [ 0 ]] } }; geojson . features . push ( feature ); } return geojson ; } function eachFeature ( f , l ){ l . on ( click , function ( ev ){ var url = http://localhost:3000/acalast/ + f . properties . id ; fetch ( url ) . then ( function ( response ) { response . json (). then ( function ( data ){ popUp ( l , data ); }); }) . catch ( function ( myJson ) { console . log ( myJson ); }); }); } function popUp ( l , data ){ var out = []; out . push ( strong + data . componentDesc + /strong ); if ( data . sensorLastObservations ){ for ( var i = data . sensorLastObservations . length - 1 ; i = 0 ; i -- ) { var observ = data . sensorLastObservations [ i ]; out . push ( observ . sensorType + : + observ . value + + observ . unit ); } } l . unbindPopup (); l . bindPopup ( out . join ( br / )). togglePopup (); } / script / body / html Recargar la aplicaci\u00f3n y clicar sobre un elemento. Debe aparecer un popup con la informaci\u00f3n de la \u00faltima lectura del sensor. ejemplo sentilo ACA","title":"Modificar el proxy"},{"location":"12_ejemplo_sentilo_aca/#referencias","text":"http://aca.gencat.cat/ca/laigua/consulta-de-dades/dades-obertes/ http://www.sentilo.io/wordpress/ http://aca-web.gencat.cat/sentilo-catalog-web/component/map http://aca.gencat.cat/web/.content/20_Aigua/08_consulta_de_dades/01_dades_obertes/us_serveis_dades_API_REST.pdf http://leafletjs.com/ https://github.com/calvinmetcalf/leaflet-ajax https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS https://es.wikipedia.org/wiki/Servidor_proxy https://nodejs.org/es/ http://expressjs.com/ https://github.com/nodejitsu/node-http-proxy","title":"Referencias"},{"location":"13_geoservicios_realtime/","text":"Geoservicios realtime Muchos de los geoservicios m\u00e1s tradicionales como los WMS o WFS pueden ser Geoservicios realtime, siempre y cuando los datos que se sirvan sean actualizados constantemente. Un ejemplo de esto es el servicio WMS sobre el estado del tr\u00e1fico del Servei Catal\u00e0 de Tr\u00e0nsit http://transit.gencat.cat/ca/informacio_viaria/estat_del_transit/informacio_geografica/estat_del_transit/ Otro ejemplo de geoservicio o m\u00e1s bien geodatos en realtime ser\u00eda la capa de Tr\u00e1fico de Google Maps. https://developers.google.com/maps/documentation/javascript/3.exp/reference?hl=es-419#TrafficLayer Geocodificaci\u00f3n OpenCage Geocoder https://geocoder.opencagedata.com/ Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Search_engines Routing Comparador de servicios basados en OSM http://wiki.openstreetmap.org/wiki/Routing/online_routers Is\u00f3cronas Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Isochrone Servicios varios Servicios de la API de Google Maps https://developers.google.com/maps/web-services/?hl=es-419 Servicios de la API de Here https://developer.here.com/documentation Servicios de la API de MapQuest https://developer.mapquest.com/ Servicios de la API de ArcGis https://developers.arcgis.com/content-and-services/","title":"13. Geoservicios realtime"},{"location":"13_geoservicios_realtime/#geoservicios-realtime","text":"Muchos de los geoservicios m\u00e1s tradicionales como los WMS o WFS pueden ser Geoservicios realtime, siempre y cuando los datos que se sirvan sean actualizados constantemente. Un ejemplo de esto es el servicio WMS sobre el estado del tr\u00e1fico del Servei Catal\u00e0 de Tr\u00e0nsit http://transit.gencat.cat/ca/informacio_viaria/estat_del_transit/informacio_geografica/estat_del_transit/ Otro ejemplo de geoservicio o m\u00e1s bien geodatos en realtime ser\u00eda la capa de Tr\u00e1fico de Google Maps. https://developers.google.com/maps/documentation/javascript/3.exp/reference?hl=es-419#TrafficLayer","title":"Geoservicios realtime"},{"location":"13_geoservicios_realtime/#geocodificacion","text":"OpenCage Geocoder https://geocoder.opencagedata.com/ Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Search_engines","title":"Geocodificaci\u00f3n"},{"location":"13_geoservicios_realtime/#routing","text":"Comparador de servicios basados en OSM http://wiki.openstreetmap.org/wiki/Routing/online_routers","title":"Routing"},{"location":"13_geoservicios_realtime/#isocronas","text":"Servicios basados en OSM http://wiki.openstreetmap.org/wiki/Isochrone","title":"Is\u00f3cronas"},{"location":"13_geoservicios_realtime/#servicios-varios","text":"Servicios de la API de Google Maps https://developers.google.com/maps/web-services/?hl=es-419 Servicios de la API de Here https://developer.here.com/documentation Servicios de la API de MapQuest https://developer.mapquest.com/ Servicios de la API de ArcGis https://developers.arcgis.com/content-and-services/","title":"Servicios varios"},{"location":"14_herramientas_visualizacion_geoservicios/","text":"Herramientas de visualizaci\u00f3n geoservicios Librerias Para la visualizaci\u00f3n de datos geogr\u00e1ficos en el la web existen diversas librerias, entre las principales podemos mencionar: http://leafletjs.com/ https://openlayers.org/ https://d3js.org/ https://developers.google.com/maps/?hl=es-419 https://www.mapbox.com/mapbox-gl-js/api/ Servicios Aparte de la librer\u00edas que permiten desarrollar nuestras propias aplicaciones, tambi\u00e9n podemos encontrar diferentes servicios que os ofrecen la posibilidad de crear o publicar nuestros mapas en la web de una forma r\u00e1pida y sencilla sin tener que programar. Estos servicios permiten hacer algunos an\u00e1lisis sobre nuestros datos. Entre los principales est\u00e1n: https://carto.com/ https://www.mapbox.com/ https://mangomap.com/ https://www.giscloud.com/ https://www.instamaps.cat/","title":"14. Herramientas de visualizaci\u00f3n geoservicios"},{"location":"14_herramientas_visualizacion_geoservicios/#herramientas-de-visualizacion-geoservicios","text":"","title":"Herramientas de visualizaci\u00f3n geoservicios"},{"location":"14_herramientas_visualizacion_geoservicios/#librerias","text":"Para la visualizaci\u00f3n de datos geogr\u00e1ficos en el la web existen diversas librerias, entre las principales podemos mencionar: http://leafletjs.com/ https://openlayers.org/ https://d3js.org/ https://developers.google.com/maps/?hl=es-419 https://www.mapbox.com/mapbox-gl-js/api/","title":"Librerias"},{"location":"14_herramientas_visualizacion_geoservicios/#servicios","text":"Aparte de la librer\u00edas que permiten desarrollar nuestras propias aplicaciones, tambi\u00e9n podemos encontrar diferentes servicios que os ofrecen la posibilidad de crear o publicar nuestros mapas en la web de una forma r\u00e1pida y sencilla sin tener que programar. Estos servicios permiten hacer algunos an\u00e1lisis sobre nuestros datos. Entre los principales est\u00e1n: https://carto.com/ https://www.mapbox.com/ https://mangomap.com/ https://www.giscloud.com/ https://www.instamaps.cat/","title":"Servicios"},{"location":"15_ejemplo_mobility/","text":"Ejemplo Mobility Creaci\u00f3n de un visor que permita el c\u00e1culo de Is\u00f3cronas Algunos de los servicios que ofrecen el c\u00e1lculo de Is\u00f3cronas son: Targomo , ISO4APP , Openrouteservice y Graphhopper Crear una carpeta con el nombre de visor-mobility . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Barcelona. Crear una API key. Al revisar la documentaci\u00f3n de la API del servicio de Openrouteservice 1 vemos que es necesario tener una API key para poder utilizarlo. Para crear la API key hay que darse de alta en la p\u00e1gina de Openrouteservice, es un servicio gratuito que tiene unas cuotas de uso. Crear una variable donde guardaremos nuestra API key. Escribir antes de la declaraci\u00f3n de nuestro mapa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Cargar la respuesta del servicio utilizando el plugin de Leaflet llamado leaflet.reachability 2 . Este plugin permite hacer una llamada al servicio de Openrouteservice y cargar la respuesta en un mapa. Modificar el archivo index.html para cargar el plugin en nuestra aplicaci\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Agregar el control de Is\u00f3cronas al mapa utilizando el plugin. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparece un el bot\u00f3n del control de Is\u00f3cronas. Abrir la consola del desarrollador y ver las peticiones que se hacen al servicio de Openrouteservice. Modificar la aplicaci\u00f3n para que se haga el c\u00e1lculo de la Is\u00f3crona cuando el usuario haga click en un punto del mapa sin utilizar el plugin. Para ello primero hay que detectar el evento click en el mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Recargar la aplicaci\u00f3n y abrir la consola del desarrollador. Hacer click sobre el mapa y ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto y ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click. Crear una funci\u00f3n que tenga como par\u00e1metro una posici\u00f3n (coordenada lat lon) y genere una url de llamada al servicio de is\u00f3cronas de Openrouteservice para que haga el c\u00e1lculo en la coordenada indicada. Copiar lo siguiente al final de nuestro c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Llamar a la funci\u00f3n crearUrlIsochrona cuando se hace click en el mapa. Escribir al final de la funci\u00f3n del click 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece una url. Abrir esta url en el navegador para comprobar que responde con un GeoJSON que contiene la is\u00f3crona. Cargar la respuesta GeoJSON del servicio utilizando el plugin de Leaflet llamado leaflet-ajax 3 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Agregar lo siguiente justo despu\u00e9s de donde cargarmos el leaflet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html - Agregar la capa geojsonLayer para que se inicialice vac\u00eda sin ning\u00fan elemento. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Utilizar el m\u00e9todo refresh para actualizar la capa geojsonLayer con la url generada al hacer click. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Refrescar el mapa y hacer click sobre el mapa para comprobar que se dibuja una nueva l\u00ednea is\u00f3crona. Pintar la l\u00ednea del color que indicamos. Por defecto se pinta la l\u00ednea de color azul. Esto es debido a que el Leaflet no sabe de que color pintar la l\u00ednea y utiliza el color por defecto. En la respuesta del servicio podemos ver que los elementos que nos retorna tienen unas propiedades (properties) en donde se listan una serie de atributos, uno de ellos es el value que corresponde con el valor del intervalo de tiempo. Lo que debemos hacer es decirle al leaflet que utilice esa propiedad para dar el color a la l\u00ednea. Escribir lo siguiente en nuestra capa geojsonLayer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Recargar el mapa y hacer click para confirmar que los pol\u00edgonos se pintan de diferentes colores. Agregar un buscador de direcciones y puntos de inter\u00e9s al mapa Para agregar un buscador utilizaremos el plugin de Leaflet Leaflet.OpenCage.Search 4 desarrollado por OpenCage que permite de una forma f\u00e1cil y r\u00e1pida hacer llamadas al servicio de b\u00fasqueda de OpenCage Geocoder. Para ello hay que obtener un API_KEY en la p\u00e1gina de OpenCage 5 Cargar la librer\u00eda en nuestra aplicaci\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Crear la variable para la API key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Agregar el control al mapa. Para utilizar el servicio de b\u00fasqueda tambi\u00e9n es necesario pasar nuestra API key: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Recargar el mapa y comprobar que aparece el control. Calcular las is\u00f3cronas al seleccionar un resultado de la b\u00fasqueda. Modificar la funci\u00f3n _geocodeResultSelected del control geocoder 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); }; var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Refrescar el mapa y abrir la consola de desarrolladores para comprobar que al seleccionar un resultado de la b\u00fasqueda aparece un objeto en la consola. Inspeccionar este objeto para ver que tiene una propiedad latlng que es lo que necesitamos para calcular las is\u00f3cronas. Llamar a nuestra funci\u00f3n crearUrlIsochrona en la funci\u00f3n del evento select para generar la url, luego refrescar la capa de geojsonLayer . Esto ya lo hemos hecho cuando el usuario hace click en el mapa. Copiar lo siguiente en la funci\u00f3n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); var url = crearUrlIsochrona ( result . center ); geojsonLayer . refresh ( url ); }; var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Refrescar la p\u00e1gina y al seleccionar un resultado de b\u00fasqueda comprobar que calcula las is\u00f3cronas desde ese punto. ejemplo is\u00f3cronas Ejercicio En la funci\u00f3n de crearUrlIsochrona cambiar el modo de transporte profile y el alcance range En el siguiente enlace se pueden ver las diferentes opciones de la API https://openrouteservice.org/dev/#/api-docs/isochrones/get Referencias https://openrouteservice.org https://github.com/traffordDataLab/leaflet.reachability https://github.com/calvinmetcalf/leaflet-ajax https://github.com/OpenCageData/leaflet-opencage-search https://opencagedata.com/","title":"15. Ejemplo Mobility"},{"location":"15_ejemplo_mobility/#ejemplo-mobility","text":"","title":"Ejemplo Mobility"},{"location":"15_ejemplo_mobility/#creacion-de-un-visor-que-permita-el-caculo-de-isocronas","text":"Algunos de los servicios que ofrecen el c\u00e1lculo de Is\u00f3cronas son: Targomo , ISO4APP , Openrouteservice y Graphhopper Crear una carpeta con el nombre de visor-mobility . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Barcelona. Crear una API key. Al revisar la documentaci\u00f3n de la API del servicio de Openrouteservice 1 vemos que es necesario tener una API key para poder utilizarlo. Para crear la API key hay que darse de alta en la p\u00e1gina de Openrouteservice, es un servicio gratuito que tiene unas cuotas de uso. Crear una variable donde guardaremos nuestra API key. Escribir antes de la declaraci\u00f3n de nuestro mapa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Cargar la respuesta del servicio utilizando el plugin de Leaflet llamado leaflet.reachability 2 . Este plugin permite hacer una llamada al servicio de Openrouteservice y cargar la respuesta en un mapa. Modificar el archivo index.html para cargar el plugin en nuestra aplicaci\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Agregar el control de Is\u00f3cronas al mapa utilizando el plugin. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparece un el bot\u00f3n del control de Is\u00f3cronas. Abrir la consola del desarrollador y ver las peticiones que se hacen al servicio de Openrouteservice. Modificar la aplicaci\u00f3n para que se haga el c\u00e1lculo de la Is\u00f3crona cuando el usuario haga click en un punto del mapa sin utilizar el plugin. Para ello primero hay que detectar el evento click en el mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Recargar la aplicaci\u00f3n y abrir la consola del desarrollador. Hacer click sobre el mapa y ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto y ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click. Crear una funci\u00f3n que tenga como par\u00e1metro una posici\u00f3n (coordenada lat lon) y genere una url de llamada al servicio de is\u00f3cronas de Openrouteservice para que haga el c\u00e1lculo en la coordenada indicada. Copiar lo siguiente al final de nuestro c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Llamar a la funci\u00f3n crearUrlIsochrona cuando se hace click en el mapa. Escribir al final de la funci\u00f3n del click 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece una url. Abrir esta url en el navegador para comprobar que responde con un GeoJSON que contiene la is\u00f3crona. Cargar la respuesta GeoJSON del servicio utilizando el plugin de Leaflet llamado leaflet-ajax 3 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Agregar lo siguiente justo despu\u00e9s de donde cargarmos el leaflet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html - Agregar la capa geojsonLayer para que se inicialice vac\u00eda sin ning\u00fan elemento. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lat + , + lng , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Utilizar el m\u00e9todo refresh para actualizar la capa geojsonLayer con la url generada al hacer click. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Refrescar el mapa y hacer click sobre el mapa para comprobar que se dibuja una nueva l\u00ednea is\u00f3crona. Pintar la l\u00ednea del color que indicamos. Por defecto se pinta la l\u00ednea de color azul. Esto es debido a que el Leaflet no sabe de que color pintar la l\u00ednea y utiliza el color por defecto. En la respuesta del servicio podemos ver que los elementos que nos retorna tienen unas propiedades (properties) en donde se listan una serie de atributos, uno de ellos es el value que corresponde con el valor del intervalo de tiempo. Lo que debemos hacer es decirle al leaflet que utilice esa propiedad para dar el color a la l\u00ednea. Escribir lo siguiente en nuestra capa geojsonLayer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Recargar el mapa y hacer click para confirmar que los pol\u00edgonos se pintan de diferentes colores.","title":"Creaci\u00f3n de un visor que permita el c\u00e1culo de Is\u00f3cronas"},{"location":"15_ejemplo_mobility/#agregar-un-buscador-de-direcciones-y-puntos-de-interes-al-mapa","text":"Para agregar un buscador utilizaremos el plugin de Leaflet Leaflet.OpenCage.Search 4 desarrollado por OpenCage que permite de una forma f\u00e1cil y r\u00e1pida hacer llamadas al servicio de b\u00fasqueda de OpenCage Geocoder. Para ello hay que obtener un API_KEY en la p\u00e1gina de OpenCage 5 Cargar la librer\u00eda en nuestra aplicaci\u00f3n. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Crear la variable para la API key 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Agregar el control al mapa. Para utilizar el servicio de b\u00fasqueda tambi\u00e9n es necesario pasar nuestra API key: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Recargar el mapa y comprobar que aparece el control. Calcular las is\u00f3cronas al seleccionar un resultado de la b\u00fasqueda. Modificar la funci\u00f3n _geocodeResultSelected del control geocoder 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); }; var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Refrescar el mapa y abrir la consola de desarrolladores para comprobar que al seleccionar un resultado de la b\u00fasqueda aparece un objeto en la consola. Inspeccionar este objeto para ver que tiene una propiedad latlng que es lo que necesitamos para calcular las is\u00f3cronas. Llamar a nuestra funci\u00f3n crearUrlIsochrona en la funci\u00f3n del evento select para generar la url, luego refrescar la capa de geojsonLayer . Esto ya lo hemos hecho cuando el usuario hace click en el mapa. Copiar lo siguiente en la funci\u00f3n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo Is\u00f3cronas Mapzen / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / link rel = stylesheet href = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.css / link rel = stylesheet href = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/css/L.Control.OpenCageSearch.dev.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = http://rawgit.com/opencagedata/leaflet-opencage-search/master/dist/js/L.Control.OpenCageSearch.dev.js / script script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/leaflet.reachability.js / script !-- Include below if you don t have your own preferred AJAX function/method (see options below) -- script src = https://cdn.jsdelivr.net/gh/trafforddatalab/leaflet.reachability@v1.0.0/simple_ajax_request.js / script script var API_KEY_ORS = {TU_API_KEY} ; var API_KEY_OCG = {TU_API_KEY_OPENCAGE} ; var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); // Initialise the reachability plugin L . control . reachability ({ // add settings/options here apiKey : API_KEY_ORS }). addTo ( map ); var options_g = { key : API_KEY_OCG , limit : 10 }; var geocoder = L . Control . openCageSearch ( options_g ). addTo ( map ); geocoder . _geocodeResultSelected = function ( result ){ if ( this . options . collapsed ) { this . _collapse (); } console . log ( result ); var url = crearUrlIsochrona ( result . center ); geojsonLayer . refresh ( url ); }; var geojsonLayer = new L . GeoJSON . AJAX ( ,{ style : function ( geoJsonFeature ){ var color = #0000FF ; switch ( geoJsonFeature . properties . value ) { case 300 : color = #0000FF ; break ; case 600 : color = #00FF00 ; break ; case 900 : color = #FF0000 ; break ; case 1200 : color = #FF00FF ; break ; default : color = #0000FF ; break ; } return { color : color }; } }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); var url = crearUrlIsochrona ( e . latlng ); console . log ( url ); geojsonLayer . refresh ( url ); }); function crearUrlIsochrona ( latlng ){ var lat = latlng . lat ; var lng = latlng . lng ; var url = https://api.openrouteservice.org/isochrones? ; var json = { locations : lng + , + lat , range_type : time , range : 1200 , interval : 300 , profile : cycling-regular , location_type : start , api_key : API_KEY_ORS }; var params = Object . keys ( json ). map ( function ( k ) { return encodeURIComponent ( k ) + = + encodeURIComponent ( json [ k ]) }). join ( ) url += params ; return url ; } / script / body / html Refrescar la p\u00e1gina y al seleccionar un resultado de b\u00fasqueda comprobar que calcula las is\u00f3cronas desde ese punto. ejemplo is\u00f3cronas Ejercicio En la funci\u00f3n de crearUrlIsochrona cambiar el modo de transporte profile y el alcance range En el siguiente enlace se pueden ver las diferentes opciones de la API https://openrouteservice.org/dev/#/api-docs/isochrones/get","title":"Agregar un buscador de direcciones y puntos de inter\u00e9s al mapa"},{"location":"15_ejemplo_mobility/#referencias","text":"https://openrouteservice.org https://github.com/traffordDataLab/leaflet.reachability https://github.com/calvinmetcalf/leaflet-ajax https://github.com/OpenCageData/leaflet-opencage-search https://opencagedata.com/","title":"Referencias"},{"location":"16_ejemplo_geoservicio_realtime/","text":"Ejemplo servicio realtime para compartir la ubicaci\u00f3n Simularemos un servicio que permita compartir la ubicaci\u00f3n de los usuarios y ver que usuarios est\u00e1n en linea. Para ello utilizaremos la librer\u00eda Socket.io 1 que permite la comunicaci\u00f3n en tiempo real en dos direcciones cliente-servidor (tipo pull) y servidor-cliente (tipo push). Esto lo hace gracias a un socket 2 . Para mostrar los datos en el mapa utilizaremos la libreria Leaflet 3 . Para obtener la ubicaci\u00f3n de los usuarios podemos usar el plugin leaflet-locatecontrol 4 , en nuestro caso vamos a simular la ubicaci\u00f3n del usuario haciendo click sobre el mapa en lugar de utilizar la ubicaci\u00f3n del usuario. Creaci\u00f3n del mapa Crear una carpeta con el nombre de user-realtime . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para comrobar que se carga un mapa centrado en Barcelona. Capturar el evento click en el mapa. Luego de la declaraci\u00f3n de nuestra capa escribir los siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Recargar la aplicaci\u00f3n y abrir la consola del desarrollador, al hacer click sobre el mapa ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto para ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click. Creaci\u00f3n del servicio que comparte la ubicaci\u00f3n de los usuarios Utilizaremos Nodejs 5 para implementar nuestro servidor web y utilizaremos el m\u00f3dulo de socket.io para establecer la comunicaci\u00f3n entre el cliente y nuestro servidor. Instalar Node.js. Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir 1 node -v Navegar hasta nuestra carpeta user-realtime y escribir: 1 npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 6 como servidor web y el m\u00f3dulo socket.io 7 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el socket.io y guardarlo en la lista de dependencias 1 npm install socket.io --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que contendr\u00e1 nuestra aplicaci\u00f3n que servir\u00e1 de servidor web. Para ello copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var express = require ( express ); var app = express (); var http = require ( http ). Server ( app ); var io = require ( socket.io )( http ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); io . on ( connection , function ( socket ){ console . log ( a user connected ); }); http . listen ( 3000 , function (){ console . log ( listening on *:3000 ); }); Probar que nuestro servidor est\u00e1 funcionando, escribiendo: 1 node app.js Abrir la url de nuestro servidor http://localhost:3000/ en el navegador para ver nuestro mapa. Modificar el mapa Agregar la librer\u00eda cliente de socket.io. Escribir en el archivo index.html justo debajo de donde cargamos el leaflet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Declarar la variable que va a tener el objeto socket.io al inicio de nuestro c\u00f3digo antes de la declaraci\u00f3n del mapa escribir los siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Recargar la p\u00e1gina y ver que en la consola aparece el mensaje de a user connected . Enviar el evento click al servidor. En la funcion que se llama al hacer click sobre el mapa escribir los siguiente para enviar un evento al servidor. Este evento lo llamaremos user_click y le pasaremos como par\u00e1metro la posici\u00f3n del click. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); socket . emit ( user_click , e . latlng ); }); / script / body / html Modificar el servidor Escuchar al evento user_click en nuestra aplicaci\u00f3n del servidor. Dentro de la funci\u00f3n que se llama en el io.on es donde se crea el socket de conexi\u00f3n, por lo tando escribir nuestro c\u00f3digo dentro de la misma. Debajo de donde escribimos el mensaje de a user connected escribir lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var express = require ( express ); var app = express (); var http = require ( http ). Server ( app ); var io = require ( socket.io )( http ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); io . on ( connection , function ( socket ){ console . log ( a user connected ); socket . on ( user_click , function ( msg ){ console . log ( msg ); }); }); http . listen ( 3000 , function (){ console . log ( listening on *:3000 ); }); Reiniciar nuestro servidor de node en la consola presionar Crtl+c. Volver a escribir node app.js. Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece las coordenadas del click. Con esto ya hemos logrado la comunicaci\u00f3n cliente-servidor. Lograr la comunicaci\u00f3n servidor-cliente y que el servidor notifique a todos los cliente para esto debemos emitir un evento en nuestro servidor. Este evento lo llamaremos new_user . Copiar lo siguiente para emitir el evento dentro de la funci\u00f3n que se llama en el evento user_click . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var express = require ( express ); var app = express (); var http = require ( http ). Server ( app ); var io = require ( socket.io )( http ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); io . on ( connection , function ( socket ){ console . log ( a user connected ); socket . on ( user_click , function ( msg ){ console . log ( msg ); io . emit ( new_user , msg ); }); }); http . listen ( 3000 , function (){ console . log ( listening on *:3000 ); }); Modificar el mapa Escuchar el evento new_user en nuestro cliente. Al final de nuestro c\u00f3digo html escribir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); socket . emit ( user_click , e . latlng ); }); socket . on ( new_user , function ( msg ){ console . log ( msg ); }); / script / body / html Recargar el servidor y recargar la p\u00e1gina. Clicar sobre el mapa y ver las coordenadas del click tanto en el la consola del servidor como en la consola de desarrolladores del navegador. Mostrar un marcador en el mapa en la posici\u00f3n donde el usuario hace click. En nuestro html en la funci\u00f3n que escucha el evento new_user agregar el siguiente c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); socket . emit ( user_click , e . latlng ); }); socket . on ( new_user , function ( msg ){ console . log ( msg ); L . marker ([ msg . lat , msg . lng ]). addTo ( map ); }); / script / body / html Recargar nuestra aplicaci\u00f3n y abrir otra pesta\u00f1a con nuestra aplicaci\u00f3n para simular que somos dos usuarios distintos. Hacer click en el mapa en cualquiera de las pesta\u00f1as y ver que nos aparece el marcador en ambas pesta\u00f1as. Referencias https://socket.io/ https://es.wikipedia.org/wiki/Socket_de_Internet http://leafletjs.com/ https://github.com/domoritz/leaflet-locatecontrol https://nodejs.org/es/ http://expressjs.com/ https://github.com/socketio/socket.io","title":"16. Ejemplo servicio realtime para compartir la ubicaci\u00f3n"},{"location":"16_ejemplo_geoservicio_realtime/#ejemplo-servicio-realtime-para-compartir-la-ubicacion","text":"Simularemos un servicio que permita compartir la ubicaci\u00f3n de los usuarios y ver que usuarios est\u00e1n en linea. Para ello utilizaremos la librer\u00eda Socket.io 1 que permite la comunicaci\u00f3n en tiempo real en dos direcciones cliente-servidor (tipo pull) y servidor-cliente (tipo push). Esto lo hace gracias a un socket 2 . Para mostrar los datos en el mapa utilizaremos la libreria Leaflet 3 . Para obtener la ubicaci\u00f3n de los usuarios podemos usar el plugin leaflet-locatecontrol 4 , en nuestro caso vamos a simular la ubicaci\u00f3n del usuario haciendo click sobre el mapa en lugar de utilizar la ubicaci\u00f3n del usuario.","title":"Ejemplo servicio realtime para compartir la ubicaci\u00f3n"},{"location":"16_ejemplo_geoservicio_realtime/#creacion-del-mapa","text":"Crear una carpeta con el nombre de user-realtime . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para comrobar que se carga un mapa centrado en Barcelona. Capturar el evento click en el mapa. Luego de la declaraci\u00f3n de nuestra capa escribir los siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Recargar la aplicaci\u00f3n y abrir la consola del desarrollador, al hacer click sobre el mapa ver que en la consola aparece el objeto del evento click. Inspeccionar este objeto para ver que tiene una propiedad llamada latlng que contine las coordenadas donde se ha hecho el click.","title":"Creaci\u00f3n del mapa"},{"location":"16_ejemplo_geoservicio_realtime/#creacion-del-servicio-que-comparte-la-ubicacion-de-los-usuarios","text":"Utilizaremos Nodejs 5 para implementar nuestro servidor web y utilizaremos el m\u00f3dulo de socket.io para establecer la comunicaci\u00f3n entre el cliente y nuestro servidor. Instalar Node.js. Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir 1 node -v Navegar hasta nuestra carpeta user-realtime y escribir: 1 npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 6 como servidor web y el m\u00f3dulo socket.io 7 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el socket.io y guardarlo en la lista de dependencias 1 npm install socket.io --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que contendr\u00e1 nuestra aplicaci\u00f3n que servir\u00e1 de servidor web. Para ello copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var express = require ( express ); var app = express (); var http = require ( http ). Server ( app ); var io = require ( socket.io )( http ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); io . on ( connection , function ( socket ){ console . log ( a user connected ); }); http . listen ( 3000 , function (){ console . log ( listening on *:3000 ); }); Probar que nuestro servidor est\u00e1 funcionando, escribiendo: 1 node app.js Abrir la url de nuestro servidor http://localhost:3000/ en el navegador para ver nuestro mapa.","title":"Creaci\u00f3n del servicio que comparte la ubicaci\u00f3n de los usuarios"},{"location":"16_ejemplo_geoservicio_realtime/#modificar-el-mapa","text":"Agregar la librer\u00eda cliente de socket.io. Escribir en el archivo index.html justo debajo de donde cargamos el leaflet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Declarar la variable que va a tener el objeto socket.io al inicio de nuestro c\u00f3digo antes de la declaraci\u00f3n del mapa escribir los siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); }); / script / body / html Recargar la p\u00e1gina y ver que en la consola aparece el mensaje de a user connected . Enviar el evento click al servidor. En la funcion que se llama al hacer click sobre el mapa escribir los siguiente para enviar un evento al servidor. Este evento lo llamaremos user_click y le pasaremos como par\u00e1metro la posici\u00f3n del click. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); socket . emit ( user_click , e . latlng ); }); / script / body / html","title":"Modificar el mapa"},{"location":"16_ejemplo_geoservicio_realtime/#modificar-el-servidor","text":"Escuchar al evento user_click en nuestra aplicaci\u00f3n del servidor. Dentro de la funci\u00f3n que se llama en el io.on es donde se crea el socket de conexi\u00f3n, por lo tando escribir nuestro c\u00f3digo dentro de la misma. Debajo de donde escribimos el mensaje de a user connected escribir lo siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var express = require ( express ); var app = express (); var http = require ( http ). Server ( app ); var io = require ( socket.io )( http ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); io . on ( connection , function ( socket ){ console . log ( a user connected ); socket . on ( user_click , function ( msg ){ console . log ( msg ); }); }); http . listen ( 3000 , function (){ console . log ( listening on *:3000 ); }); Reiniciar nuestro servidor de node en la consola presionar Crtl+c. Volver a escribir node app.js. Recargar la p\u00e1gina y hacer click sobre el mapa para ver que en la consola aparece las coordenadas del click. Con esto ya hemos logrado la comunicaci\u00f3n cliente-servidor. Lograr la comunicaci\u00f3n servidor-cliente y que el servidor notifique a todos los cliente para esto debemos emitir un evento en nuestro servidor. Este evento lo llamaremos new_user . Copiar lo siguiente para emitir el evento dentro de la funci\u00f3n que se llama en el evento user_click . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var express = require ( express ); var app = express (); var http = require ( http ). Server ( app ); var io = require ( socket.io )( http ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); io . on ( connection , function ( socket ){ console . log ( a user connected ); socket . on ( user_click , function ( msg ){ console . log ( msg ); io . emit ( new_user , msg ); }); }); http . listen ( 3000 , function (){ console . log ( listening on *:3000 ); });","title":"Modificar el servidor"},{"location":"16_ejemplo_geoservicio_realtime/#modificar-el-mapa_1","text":"Escuchar el evento new_user en nuestro cliente. Al final de nuestro c\u00f3digo html escribir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); socket . emit ( user_click , e . latlng ); }); socket . on ( new_user , function ( msg ){ console . log ( msg ); }); / script / body / html Recargar el servidor y recargar la p\u00e1gina. Clicar sobre el mapa y ver las coordenadas del click tanto en el la consola del servidor como en la consola de desarrolladores del navegador. Mostrar un marcador en el mapa en la posici\u00f3n donde el usuario hace click. En nuestro html en la funci\u00f3n que escucha el evento new_user agregar el siguiente c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js / script script type = text/javascript var socket = io (); var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); map . on ( click , function ( e ){ console . log ( e ); socket . emit ( user_click , e . latlng ); }); socket . on ( new_user , function ( msg ){ console . log ( msg ); L . marker ([ msg . lat , msg . lng ]). addTo ( map ); }); / script / body / html Recargar nuestra aplicaci\u00f3n y abrir otra pesta\u00f1a con nuestra aplicaci\u00f3n para simular que somos dos usuarios distintos. Hacer click en el mapa en cualquiera de las pesta\u00f1as y ver que nos aparece el marcador en ambas pesta\u00f1as.","title":"Modificar el mapa"},{"location":"16_ejemplo_geoservicio_realtime/#referencias","text":"https://socket.io/ https://es.wikipedia.org/wiki/Socket_de_Internet http://leafletjs.com/ https://github.com/domoritz/leaflet-locatecontrol https://nodejs.org/es/ http://expressjs.com/ https://github.com/socketio/socket.io","title":"Referencias"},{"location":"17_ejemplo_gtfs/","text":"Ejemplo GTFS \u00bfQu\u00e9 es la GTFS? La Especificaci\u00f3n general de feeds de transporte p\u00fablico (GTFS) define un formato com\u00fan para los horarios de transporte p\u00fablico y la informaci\u00f3n geogr\u00e1fica asociada a ellos. Los \"feeds\" GTFS permiten que las empresas de transporte p\u00fablico publiquen sus datos de transporte y que los programadores escriban aplicaciones que consuman esos datos de manera interoperable 1 . Creaci\u00f3n de un visor que muestre las l\u00ednes y paradas de un GTFS Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 2 . Y cargaremos los datos de portal de la Plataforma VLCi (Valencia SmartCity) 3 Crear una carpeta con el nombre de visor-gtfs . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Valencia. Crear el proxy Crear un archivo con el nombre de package.json dentro de la carpeta. Abrir el archivo package.json con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { name : visor-gtfs , version : 1.0.0 , description : , main : index.js , scripts : { test : echo \\ Error: no test specified\\ exit 1 }, author : , license : ISC , dependencies : { assert : ^1.4.1 , express : ^4.16.2 , fast-csv : ^2.4.1 , request : ^2.83.0 , yauzl : ^2.9.1 } } Instalar Node.js 4 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir 1 node -v Navegar hasta nuestra carpeta visor-gtfs y escribir: 1 npm install Con este comando estamos instalando las dependencias declarades en el archivo package.json Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio GTFS. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: 1 node app.js Escribir en el navegador http://localhost:3000 y ver nuestro mapa. Crear un archivo llamado gtfs2geojson.js . Copiar en el archivo el c\u00f3digo del siguiente enlace https://raw.githubusercontent.com/andrewharvey/gtfs2geojson/master/index.js este c\u00f3digo convierte datos de un GTFS en un GeoJSON. C\u00f3digo basado en la librer\u00eda https://github.com/andrewharvey/gtfs2geojson Cargar en archivo en nuestra app.js. Escribir lo siguiente justo desp\u00faes de donde se carga el m\u00f3dulo yauzl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); Crear la variable que contiene la url del servicio GTFS de L\u00edneas, paradas, horarios de autobuses de la EMT de Valencia 5 . Escribir lo siguiente justo despues de la variable gtfs2geojson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); Crear una funci\u00f3n llamada getZip para descargar un archivo. La funci\u00f3n recibe como par\u00e1metro una url. Escribir lo siguiente al final del archivo app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } Crear una funci\u00f3n que extrae un archivo de un zip. La funcion recibe como par\u00e1metro el nombre del archivo que se desea extraer. Escribir lo siguiente al final del archivo app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( gtfs.zip , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( entry , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with / . // Note that entires for directories themselves are optional. // An entry s fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( finish , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Descargar el archivo GTFS y guardarlo en el ordenador. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /getdata/* , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( shapes.txt ), leerZip ( stops.txt )]). then ( values = { res . json ({ msg : archivos descargados }); }); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( gtfs.zip , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( entry , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with / . // Note that entires for directories themselves are optional. // An entry s fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( finish , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/getdata/ en el navegador para comprobar que se han descargado correctamente los archivos gtfs.zip , shapes.txt y stops.txt . Leer los archivos GTFS y convertirlos a GeoJson. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /getdata/* , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( shapes.txt ), leerZip ( stops.txt )]). then ( values = { res . json ({ msg : archivos descargados }); }); }); }); app . all ( /stops/* , function ( req , res ) { gtfs2geojson . stops ( fs . readFileSync ( stops.txt , utf8 ), function ( result ){ res . json ( result ); }); }); app . all ( /shapes/* , function ( req , res ) { gtfs2geojson . lines ( fs . readFileSync ( shapes.txt , utf8 ), function ( result ){ res . json ( result ); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( gtfs.zip , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( entry , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with / . // Note that entires for directories themselves are optional. // An entry s fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( finish , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/stops/ en el navegador para comprobar que se muestra un GeoJson con la informaci\u00f3n de las paradas. Modificar el mapa Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Utilizar el plugin para agregar la capa de paradas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparecen los puntos de las paradas en el mapa. Utilizar el plugin para agregar la capa de l\u00edneas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( /shapes/ ,{ }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa. Cargar la librer\u00eda de manipulaci\u00f3n de colores chroma.js 7 . Escribir lo siguiente despu\u00e9s de donde cargarmos el plugin de leaflet.ajax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.5/chroma.min.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( /shapes/ ,{ }). addTo ( map ); / script / body / html Dar estilo a la capa de l\u00edneas generando un color aleatorio. Escribir lo siguiente en las opciones de la capa geojsonLineas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.5/chroma.min.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( /shapes/ ,{ style : function ( geoJsonFeature ){ return { color : chroma . random (), opacity : 0.5 }; } }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa con colores aleatorios. ejemplo gtfs Ejercicios Mostrar un popup con informaci\u00f3n de la propiedad shape_id al hacer click en la capa de l\u00edneas Cargar datos del gtfs de FGC https://www.fgc.cat/es/opendata/ En el siguiente enlace est\u00e1 el fichero de gtfs https://www.fgc.cat/wp-content/uploads/2018/02/google_transit.zip Centrar el mapa en Barcelona Referencias https://developers.google.com/transit/gtfs/?hl=es-419 http://leafletjs.com/ https://opendata.vlci.valencia.es https://nodejs.org/es/ http://gobiernoabierto.valencia.es/es/dataset/?id=google-transit-lineas-paradas-horarios-de-autobuses https://github.com/calvinmetcalf/leaflet-ajax https://github.com/gka/chroma.js/","title":"17. Ejemplo GTFS"},{"location":"17_ejemplo_gtfs/#ejemplo-gtfs","text":"","title":"Ejemplo GTFS"},{"location":"17_ejemplo_gtfs/#que-es-la-gtfs","text":"La Especificaci\u00f3n general de feeds de transporte p\u00fablico (GTFS) define un formato com\u00fan para los horarios de transporte p\u00fablico y la informaci\u00f3n geogr\u00e1fica asociada a ellos. Los \"feeds\" GTFS permiten que las empresas de transporte p\u00fablico publiquen sus datos de transporte y que los programadores escriban aplicaciones que consuman esos datos de manera interoperable 1 .","title":"\u00bfQu\u00e9 es la GTFS?"},{"location":"17_ejemplo_gtfs/#creacion-de-un-visor-que-muestre-las-lines-y-paradas-de-un-gtfs","text":"Para crear un visor de mapas utilizaremos la librer\u00eda de mapas Leaflet 2 . Y cargaremos los datos de portal de la Plataforma VLCi (Valencia SmartCity) 3 Crear una carpeta con el nombre de visor-gtfs . Crear un archivo con el nombre de index.html dentro de la carpeta. Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para confirmar que se carga un mapa centrado en Valencia.","title":"Creaci\u00f3n de un visor que muestre las l\u00ednes y paradas de un GTFS"},{"location":"17_ejemplo_gtfs/#crear-el-proxy","text":"Crear un archivo con el nombre de package.json dentro de la carpeta. Abrir el archivo package.json con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { name : visor-gtfs , version : 1.0.0 , description : , main : index.js , scripts : { test : echo \\ Error: no test specified\\ exit 1 }, author : , license : ISC , dependencies : { assert : ^1.4.1 , express : ^4.16.2 , fast-csv : ^2.4.1 , request : ^2.83.0 , yauzl : ^2.9.1 } } Instalar Node.js 4 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Abrir la consola para verificar que se ha instalado correctamente y escribir 1 node -v Navegar hasta nuestra carpeta visor-gtfs y escribir: 1 npm install Con este comando estamos instalando las dependencias declarades en el archivo package.json Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio GTFS. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribir: 1 node app.js Escribir en el navegador http://localhost:3000 y ver nuestro mapa. Crear un archivo llamado gtfs2geojson.js . Copiar en el archivo el c\u00f3digo del siguiente enlace https://raw.githubusercontent.com/andrewharvey/gtfs2geojson/master/index.js este c\u00f3digo convierte datos de un GTFS en un GeoJSON. C\u00f3digo basado en la librer\u00eda https://github.com/andrewharvey/gtfs2geojson Cargar en archivo en nuestra app.js. Escribir lo siguiente justo desp\u00faes de donde se carga el m\u00f3dulo yauzl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); Crear la variable que contiene la url del servicio GTFS de L\u00edneas, paradas, horarios de autobuses de la EMT de Valencia 5 . Escribir lo siguiente justo despues de la variable gtfs2geojson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); Crear una funci\u00f3n llamada getZip para descargar un archivo. La funci\u00f3n recibe como par\u00e1metro una url. Escribir lo siguiente al final del archivo app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } Crear una funci\u00f3n que extrae un archivo de un zip. La funcion recibe como par\u00e1metro el nombre del archivo que se desea extraer. Escribir lo siguiente al final del archivo app.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( gtfs.zip , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( entry , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with / . // Note that entires for directories themselves are optional. // An entry s fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( finish , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Descargar el archivo GTFS y guardarlo en el ordenador. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /getdata/* , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( shapes.txt ), leerZip ( stops.txt )]). then ( values = { res . json ({ msg : archivos descargados }); }); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( gtfs.zip , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( entry , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with / . // Note that entires for directories themselves are optional. // An entry s fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( finish , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/getdata/ en el navegador para comprobar que se han descargado correctamente los archivos gtfs.zip , shapes.txt y stops.txt . Leer los archivos GTFS y convertirlos a GeoJson. Escribir lo siguiente justo antes de la l\u00ednea donde definimos el puerto por el cual escucha nuestro servidor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 var express = require ( express ); var app = express (); var request = require ( request ); var path = require ( path ); var https = require ( https ); var fs = require ( fs ); var yauzl = require ( yauzl ); var gtfs2geojson = require ( ./gtfs2geojson.js ); const url = https://opendata.vlci.valencia.es:8443/dataset/4645f8bf-28d7-4420-bab2-d5c5e7de2a5a/resource/11591648-a984-4d64-89e3-3730f3123403/download/googletransit.zip ; app . get ( / , function ( req , res ){ res . sendFile ( __dirname + /index.html ); }); app . all ( /getdata/* , function ( req , res ) { getZip ( url ). then ( function (){ Promise . all ([ leerZip ( shapes.txt ), leerZip ( stops.txt )]). then ( values = { res . json ({ msg : archivos descargados }); }); }); }); app . all ( /stops/* , function ( req , res ) { gtfs2geojson . stops ( fs . readFileSync ( stops.txt , utf8 ), function ( result ){ res . json ( result ); }); }); app . all ( /shapes/* , function ( req , res ) { gtfs2geojson . lines ( fs . readFileSync ( shapes.txt , utf8 ), function ( result ){ res . json ( result ); }); }); app . listen ( 3000 ); function getZip ( url ){ return new Promise ( function ( resolve , reject ) { var file = fs . createWriteStream ( gtfs.zip ); var request = https . get ( url , function ( response ) { response . pipe ( file ); }); file . on ( finish , function (){ resolve (); }); }); } function leerZip ( archivo ){ return new Promise ( function ( resolve , reject ) { yauzl . open ( gtfs.zip , { lazyEntries : true }, function ( err , zipfile ) { if ( err ) throw err ; zipfile . readEntry (); zipfile . on ( entry , function ( entry ) { if ( /\\/$/ . test ( entry . fileName )) { // Directory file names end with / . // Note that entires for directories themselves are optional. // An entry s fileName implicitly requires its parent directories to exist. zipfile . readEntry (); } else { // file entry if ( entry . fileName === archivo ){ zipfile . openReadStream ( entry , function ( err , readStream ) { if ( err ) throw err ; var file = fs . createWriteStream ( entry . fileName ); readStream . pipe ( file ); file . on ( finish , function (){ resolve (); }); }); } else { zipfile . readEntry (); } } }); }); }); } Reiniciar nuestro servidor de node, ir a la consola y presionar Crtl+c. Escribir node app.js. Abrir la url http://localhost:3000/stops/ en el navegador para comprobar que se muestra un GeoJson con la informaci\u00f3n de las paradas.","title":"Crear el proxy"},{"location":"17_ejemplo_gtfs/#modificar-el-mapa","text":"Cargar este JSON en nuestro mapa utilizando un plugin de Leaflet llamado leaflet-ajax 6 . Este plugin permite hacer una llamada AJAX a un servicio que retorne un JSON y cargar la respuesta en un mapa. Para cargar este plugin debemos agregar lo siguiente justo despu\u00e9s de donde hemos cargado el leaflet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Utilizar el plugin para agregar la capa de paradas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparecen los puntos de las paradas en el mapa. Utilizar el plugin para agregar la capa de l\u00edneas al mapa llamando a nuestro servidor. Agregar lo siguiente al final de nuestro c\u00f3digo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( /shapes/ ,{ }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa. Cargar la librer\u00eda de manipulaci\u00f3n de colores chroma.js 7 . Escribir lo siguiente despu\u00e9s de donde cargarmos el plugin de leaflet.ajax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.5/chroma.min.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( /shapes/ ,{ }). addTo ( map ); / script / body / html Dar estilo a la capa de l\u00edneas generando un color aleatorio. Escribir lo siguiente en las opciones de la capa geojsonLineas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 !DOCTYPE html html head meta charset = UTF-8 meta name = viewport content = width=device-width, initial-scale=1.0 meta http-equiv = X-UA-Compatible content = ie=edge title Ejemplo GTFS / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { height : 100 % ; width : 100 % ; position : absolute ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://calvinmetcalf.github.io/leaflet-ajax/dist/leaflet.ajax.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.5/chroma.min.js / script script var map = L . map ( map ); map . setView ([ 39.4652 , - 0.3861 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojsonParadas = new L . GeoJSON . AJAX ( /stops/ ,{ pointToLayer : function ( feature , latlng ) { return new L . CircleMarker ( latlng , { radius : 5 , fillColor : #A30000 , color : #A30000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }); }, onEachFeature : function ( feature , layer ) { layer . bindPopup ( feature . properties . stop_name ); } }). addTo ( map ); var geojsonLineas = new L . GeoJSON . AJAX ( /shapes/ ,{ style : function ( geoJsonFeature ){ return { color : chroma . random (), opacity : 0.5 }; } }). addTo ( map ); / script / body / html Recargar el mapa y comprobar que aparecen las l\u00edneas del bus en el mapa con colores aleatorios. ejemplo gtfs Ejercicios Mostrar un popup con informaci\u00f3n de la propiedad shape_id al hacer click en la capa de l\u00edneas Cargar datos del gtfs de FGC https://www.fgc.cat/es/opendata/ En el siguiente enlace est\u00e1 el fichero de gtfs https://www.fgc.cat/wp-content/uploads/2018/02/google_transit.zip Centrar el mapa en Barcelona","title":"Modificar el mapa"},{"location":"17_ejemplo_gtfs/#referencias","text":"https://developers.google.com/transit/gtfs/?hl=es-419 http://leafletjs.com/ https://opendata.vlci.valencia.es https://nodejs.org/es/ http://gobiernoabierto.valencia.es/es/dataset/?id=google-transit-lineas-paradas-horarios-de-autobuses https://github.com/calvinmetcalf/leaflet-ajax https://github.com/gka/chroma.js/","title":"Referencias"},{"location":"1_introduccion_a_las_smart_cities/","text":"Introducci\u00f3n a las Smart Cities A smart city is an urban area that uses different types of electronic data collection sensors to supply information used to manage assets and resources efficiently. This includes data collected from citizens, devices, and assets that is processed and analyzed to monitor and manage traffic and transportation systems, power plants, water supply networks, waste management, law enforcement, information systems, schools, libraries, hospitals, and other community services https://en.wikipedia.org/wiki/Smart_city Temario Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData Ver presentaci\u00f3n","title":"1. Introducci\u00f3n a las Smart Cities"},{"location":"1_introduccion_a_las_smart_cities/#introduccion-a-las-smart-cities","text":"A smart city is an urban area that uses different types of electronic data collection sensors to supply information used to manage assets and resources efficiently. This includes data collected from citizens, devices, and assets that is processed and analyzed to monitor and manage traffic and transportation systems, power plants, water supply networks, waste management, law enforcement, information systems, schools, libraries, hospitals, and other community services https://en.wikipedia.org/wiki/Smart_city Temario Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData","title":"Introducci\u00f3n a las Smart Cities"},{"location":"1_introduccion_a_las_smart_cities/#ver-presentacion","text":"","title":"Ver presentaci\u00f3n"},{"location":"2_conceptos_y_servicios_open_data/","text":"API servicios Open Data (CKAN y SOCRATA) Ejemplo API CKAN El API de CKAN http://docs.ckan.org/en/latest/api/index.html no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtrar datasets. En este ejemplo utilizaremos el m\u00e9todo resource_search para buscar datasets en cualquier portal de CKAN Para buscar en portales CKAN necesitamos saber la URL del portal , exemplo http://demo.ckan.org y a\u00f1adir el path del m\u00e9todo a utilizar /api/3/action/resource_search? http://demo.ckan.org/api/3/action/resource_search ? Ver ejemplos online Creaci\u00f3n de un buscador Dentro de nuestor espacio de trabaj creamos un archivo con el nombre de ckan.html . Abrimos el archivo ckan.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 !DOCTYPE html html head meta charset = UTF-8 title B\u00e0sic sample Resource Search API CKAN / title link rel = stylesheet href = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css / script type = text/javascript src = https://code.jquery.com/jquery-3.3.1.min.js / script script type = text/javascript src = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo ckan.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 div class = container h3 Resource Search example / h3 p Package Search br a target = _blank href = http://docs.ckan.org/en/latest/api/ http://docs.ckan.org/en/latest/api/ / a / p form id = _form div class = form-group label for = url_ckan Url: / label select id = url_ckan option value = http://demo.ckan.org/api/3/action/resource_search? ckan.org / option option value = http://old.datahub.io/api/3/action/resource_search? old.datahub.io / option !-- a\u00f1adimos BCN opendata -- / select / div div class = form-group label for = text_filter_ckan Filter u (name, descripton, format ) / u / label input type = text class = form-control id = text_filter_ckan value = name:wifi placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_ckan Num results / label input type = number size = 3 class = form-control id = num_results_ckan value = 5 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo ckan.html en el navegador. A\u00f1adimos just encima del tag /head el siguiente c\u00f3digo javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #_form ). submit ( function ( event ) { sendRequest (); event . preventDefault (); }); function sendRequest (){ var data = { rows : $ ( #num_results_ckan ). val (), query : $ ( #text_filter_ckan ). val () }; $ . ajax ({ url : $ ( #url_ckan ). val (), data : data , dataType : jsonp , success : function ( data ) { if ( data . success ) { $ ( #results ). html ( Total results found: + data . result . count ); $ ( #mygrid ). html ( ); if ( data . result . count = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . result . results , function ( index , value ) { $ ( #mygrid ). append ( li + value . name + : a href= + value . url + + value . url + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: + data . error . message ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina ckan.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adir una o m\u00e1s URLs de otros portales de CKAN, por ejemplo OpenDataBCN Note Ejercicio 2 : \u00bfC\u00f3mo har\u00edamos para qu\u00e9 en los resultados apareciera la fecha de creaci\u00f3n del dato? Note Ejercicio 3 : Descargamos CSV accidentes Ejemplos API SOCRATA El API de Socrata https://dev.socrata.com no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtra datasets. En este primer ejemplo utilizaremos la Discovery API https://socratadiscovery.docs.apiary.io/ para buscar datasets en cualquier portal de Socrata Creaci\u00f3n de un buscador Creamos un archivo con el nombre de socrata.html . Abrimos el archivo socrata.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 !DOCTYPE html html head meta charset = UTF-8 title Basic sample API Discovery SOCRATA / title link rel = stylesheet href = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css / script type = text/javascript src = https://code.jquery.com/jquery-3.3.1.min.js / script script type = text/javascript src = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo socrata.html en el navegador. A\u00f1adimos dentro del tag * body * la maquetaci\u00f3n HTML. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 div class = container h3 SOCRATA Resource Search example / h3 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = Contracts placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo socrata.html en el navegador. A\u00f1adimos just encima del tag /head el siguiente c\u00f3digo javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); function sendRequest () { var _data = { q : $ ( #text_filter_socrata ). val (), limit : $ ( #num_results_socrata ). val () }; $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . results , function ( index , value ) { $ ( #mygrid ). append ( li b + value . resource . name + /b ( + value . resource . type + ): a target= _blank href= + value . link + + value . link + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrata.html y lanzamos b\u00fasquedas Note Ejercicio 1 : \u00bfC\u00f3mo filtrar\u00edamos para qu\u00e9 s\u00f3lo ense\u00f1ara \"assets\" de tipo \"map\", only:map ? Creaci\u00f3n de un mapa para ver resultados de Socrata Creamos un archivo con el nombre de socrata_mapa.html . Abrimos el archivo socrata_mapa.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 !DOCTYPE html html head meta charset = UTF-8 title Basic Leaflet Map sample API Discovery SOCRATA / title link rel = stylesheet href = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css / link rel = stylesheet href = https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.css / script type = text/javascript src = https://code.jquery.com/jquery-3.3.1.min.js / script script type = text/javascript src = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-ajax/2.1.0/leaflet.ajax.min.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/Leaflet.Spin/1.1.0/leaflet.spin.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 div class = container h3 SOCRATA Maps Resources / h3 div class = row div class = col-md-6 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = placeholder = text filter div class = checkbox label input type = checkbox id = chk_transparencia value = analisi.transparenciacatalunya.cat Only https://analisi.transparenciacatalunya.cat / label / div div Filter : only=maps / div / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 365px;overflow:auto / div / div div class = col-md-6 div id = map style = width:100%;height:700px / div / div / div Abrimos el archivo socrata_mapa.html en el navegador. A\u00f1adimos just encima del tag /head el siguiente c\u00f3digo javascriptscript $ . ajaxSetup ({ cache : true }); var map ; var geojsonLayer ; var _LL ; $ ( document ). ready ( function () { map = L . map ( map ). setView ([ 41.6863 , 1.8382 ], 8 ); esri = L . tileLayer ( http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} , { maxZoom : 17 , minZoom : 1 , attribution : Tiles \u00a9 Esri , }) osm = L . tileLayer ( http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png , { maxZoom : 19 , minZoom : 1 , attribution : OSM }). addTo ( map ); Stamen_Toner = L . tileLayer ( http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png , { attribution : Map tiles by a href= http://stamen.com Stamen Design /a , a href= http://creativecommons.org/licenses/by/3.0 CC BY 3.0 /a mdash; Map data copy; a href= http://www.openstreetmap.org/copyright OpenStreetMap /a , subdomains : abcd , minZoom : 0 , maxZoom : 20 }) var baseMaps = { Orto : esri , Mapa : osm , Toner : Stamen_Toner }; L . control . layers ( baseMaps , null ). addTo ( map ); L . control . scale (). addTo ( map ); $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); $ ( document ). on ( click , .btn-xs , function () { var attr = $ ( this ). attr ( data ); if ( attr attr . indexOf ( # ) != - 1 ) { var params = attr . split ( # ); var _url = https:// + params [ 1 ] + /api/views.json?method=getByResourceName name= + params [ 0 ]; $ . ajax ({ url : _url , method : GET , dataType : json , success : function ( data ) { if ( data . childViews ) { //var _url2 = https:// + params[1] + /resource/ + data.childViews[0] + .json?$limit=30 ; var _url2 = https:// + params [ 1 ] + /api/geospatial/ + data . childViews [ 0 ] + ?method=export format=GeoJSON ; sendRequestGEOJSON ( _url2 , true ); } else { var _url2 = http:// + params [ 1 ] + /resource/ + params [ 0 ] + .json?$limit=30 ; sendRequestGEOJSON ( _url2 , false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } else { alert ( No resource available ); } }); function clearLayers () { if ( map . hasLayer ( geojsonLayer )) { map . removeLayer ( geojsonLayer ); }; if ( map . hasLayer ( _LL )) { map . removeLayer ( _LL ); }; } function sendRequestGEOJSON ( _url2 , isGeoJson ) { map . spin ( true ); var stylePoint = { radius : 8 , fillColor : #ff7800 , color : #000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }; clearLayers (); $ . ajax ({ type : GET , url : _url2 , // jsonp: $jsonp , // dataType: jsonp , success : function ( response ) { if ( isGeoJson ) { geojsonLayer = L . geoJson ( response , { style : function ( feature ) { return { weight : 2 , color : #999 , opacity : 1 , fillColor : #B0DE5C , fillOpacity : 0.8 }; }, onEachFeature : popUp }). addTo ( map ); map . fitBounds ( geojsonLayer . getBounds ()); map . spin ( false ); } else { _LL = L . featureGroup () for ( var i = 0 ; i response . length ; i ++ ) { var marker = response [ i ]; if ( response [ i ]. location_1 ) { L . circleMarker ([ response [ i ]. location_1 . latitude , response [ i ]. location_1 . longitude ], stylePoint ). addTo ( _LL ); } else if ( response [ i ]. location ) { L . circleMarker ([ response [ i ]. location . latitude , response [ i ]. location . longitude ], stylePoint ). addTo ( _LL ); } else { $ ( #results ). html ( ERROR no locations found ); map . spin ( false ); } } _LL . addTo ( map ); map . panTo ( _LL . getBounds (). getCenter ()); map . spin ( false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); map . spin ( false ); } }); } function popUp ( f , l ) { var out = []; if ( f . properties ) { for ( key in f . properties ) { out . push ( key + : + f . properties [ key ]); } l . bindPopup ( out . join ( br / )); } } function sendRequest () { var _data = { limit : $ ( #num_results_socrata ). val (), only : maps }; console . info ( $ ( #chk_transparencia ). attr ( checked )); if ( $ ( #chk_transparencia ). attr ( checked )) { _data . domains = $ ( #chk_transparencia ). val (); } if ( $ ( #text_filter_socrata ). val () != ) { _data . q = $ ( #text_filter_socrata ). val (); } $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { var cList = $ ( ul ). appendTo ( #mygrid ); $ . each ( data . results , function ( index , value ) { $ ( li class= li b + value . resource . name + : /b + a target= _blank href= + value . link + Link /a + a class= btn btn-success btn-xs href= # data= + value . resource . id + # + value . metadata . domain + Map it /a ). appendTo ( cList ); }); } } else { console . info ( data ); $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrat_mapa.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adimos attribution y download_count a los resultados Note Ejercicio 2 : \u00bfCambiamos colores y estilos de los puntos del mapa? Tip Ejemplos creados downloads/utilizacion-servicio-opendata.zip en nuestro espacio de trabajo. Referencias http://docs.ckan.org/en/latest/api/ http://ckan.org https://www.socrata.com http://docs.socratadiscovery.apiary.io","title":"2. API servicios Open data (CKAN y SOCRATA)"},{"location":"2_conceptos_y_servicios_open_data/#api-servicios-open-data-ckan-y-socrata","text":"","title":"API servicios Open Data (CKAN y SOCRATA)"},{"location":"2_conceptos_y_servicios_open_data/#ejemplo-api-ckan","text":"El API de CKAN http://docs.ckan.org/en/latest/api/index.html no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtrar datasets. En este ejemplo utilizaremos el m\u00e9todo resource_search para buscar datasets en cualquier portal de CKAN Para buscar en portales CKAN necesitamos saber la URL del portal , exemplo http://demo.ckan.org y a\u00f1adir el path del m\u00e9todo a utilizar /api/3/action/resource_search? http://demo.ckan.org/api/3/action/resource_search ? Ver ejemplos online","title":"Ejemplo API CKAN"},{"location":"2_conceptos_y_servicios_open_data/#creacion-de-un-buscador","text":"Dentro de nuestor espacio de trabaj creamos un archivo con el nombre de ckan.html . Abrimos el archivo ckan.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 !DOCTYPE html html head meta charset = UTF-8 title B\u00e0sic sample Resource Search API CKAN / title link rel = stylesheet href = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css / script type = text/javascript src = https://code.jquery.com/jquery-3.3.1.min.js / script script type = text/javascript src = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo ckan.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 div class = container h3 Resource Search example / h3 p Package Search br a target = _blank href = http://docs.ckan.org/en/latest/api/ http://docs.ckan.org/en/latest/api/ / a / p form id = _form div class = form-group label for = url_ckan Url: / label select id = url_ckan option value = http://demo.ckan.org/api/3/action/resource_search? ckan.org / option option value = http://old.datahub.io/api/3/action/resource_search? old.datahub.io / option !-- a\u00f1adimos BCN opendata -- / select / div div class = form-group label for = text_filter_ckan Filter u (name, descripton, format ) / u / label input type = text class = form-control id = text_filter_ckan value = name:wifi placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_ckan Num results / label input type = number size = 3 class = form-control id = num_results_ckan value = 5 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo ckan.html en el navegador. A\u00f1adimos just encima del tag /head el siguiente c\u00f3digo javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #_form ). submit ( function ( event ) { sendRequest (); event . preventDefault (); }); function sendRequest (){ var data = { rows : $ ( #num_results_ckan ). val (), query : $ ( #text_filter_ckan ). val () }; $ . ajax ({ url : $ ( #url_ckan ). val (), data : data , dataType : jsonp , success : function ( data ) { if ( data . success ) { $ ( #results ). html ( Total results found: + data . result . count ); $ ( #mygrid ). html ( ); if ( data . result . count = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . result . results , function ( index , value ) { $ ( #mygrid ). append ( li + value . name + : a href= + value . url + + value . url + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: + data . error . message ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina ckan.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adir una o m\u00e1s URLs de otros portales de CKAN, por ejemplo OpenDataBCN Note Ejercicio 2 : \u00bfC\u00f3mo har\u00edamos para qu\u00e9 en los resultados apareciera la fecha de creaci\u00f3n del dato? Note Ejercicio 3 : Descargamos CSV accidentes","title":"Creaci\u00f3n de un buscador"},{"location":"2_conceptos_y_servicios_open_data/#ejemplos-api-socrata","text":"El API de Socrata https://dev.socrata.com no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtra datasets. En este primer ejemplo utilizaremos la Discovery API https://socratadiscovery.docs.apiary.io/ para buscar datasets en cualquier portal de Socrata Creaci\u00f3n de un buscador Creamos un archivo con el nombre de socrata.html . Abrimos el archivo socrata.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 !DOCTYPE html html head meta charset = UTF-8 title Basic sample API Discovery SOCRATA / title link rel = stylesheet href = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css / script type = text/javascript src = https://code.jquery.com/jquery-3.3.1.min.js / script script type = text/javascript src = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo socrata.html en el navegador. A\u00f1adimos dentro del tag * body * la maquetaci\u00f3n HTML. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 div class = container h3 SOCRATA Resource Search example / h3 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = Contracts placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo socrata.html en el navegador. A\u00f1adimos just encima del tag /head el siguiente c\u00f3digo javascript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); function sendRequest () { var _data = { q : $ ( #text_filter_socrata ). val (), limit : $ ( #num_results_socrata ). val () }; $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . results , function ( index , value ) { $ ( #mygrid ). append ( li b + value . resource . name + /b ( + value . resource . type + ): a target= _blank href= + value . link + + value . link + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrata.html y lanzamos b\u00fasquedas Note Ejercicio 1 : \u00bfC\u00f3mo filtrar\u00edamos para qu\u00e9 s\u00f3lo ense\u00f1ara \"assets\" de tipo \"map\", only:map ?","title":"Ejemplos API SOCRATA"},{"location":"2_conceptos_y_servicios_open_data/#creacion-de-un-mapa-para-ver-resultados-de-socrata","text":"Creamos un archivo con el nombre de socrata_mapa.html . Abrimos el archivo socrata_mapa.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 !DOCTYPE html html head meta charset = UTF-8 title Basic Leaflet Map sample API Discovery SOCRATA / title link rel = stylesheet href = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css / link rel = stylesheet href = https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.css / script type = text/javascript src = https://code.jquery.com/jquery-3.3.1.min.js / script script type = text/javascript src = https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/leaflet.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-ajax/2.1.0/leaflet.ajax.min.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/spin.js/2.3.2/spin.min.js / script script type = text/javascript src = https://cdnjs.cloudflare.com/ajax/libs/Leaflet.Spin/1.1.0/leaflet.spin.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 div class = container h3 SOCRATA Maps Resources / h3 div class = row div class = col-md-6 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = placeholder = text filter div class = checkbox label input type = checkbox id = chk_transparencia value = analisi.transparenciacatalunya.cat Only https://analisi.transparenciacatalunya.cat / label / div div Filter : only=maps / div / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 365px;overflow:auto / div / div div class = col-md-6 div id = map style = width:100%;height:700px / div / div / div Abrimos el archivo socrata_mapa.html en el navegador. A\u00f1adimos just encima del tag /head el siguiente c\u00f3digo javascriptscript $ . ajaxSetup ({ cache : true }); var map ; var geojsonLayer ; var _LL ; $ ( document ). ready ( function () { map = L . map ( map ). setView ([ 41.6863 , 1.8382 ], 8 ); esri = L . tileLayer ( http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} , { maxZoom : 17 , minZoom : 1 , attribution : Tiles \u00a9 Esri , }) osm = L . tileLayer ( http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png , { maxZoom : 19 , minZoom : 1 , attribution : OSM }). addTo ( map ); Stamen_Toner = L . tileLayer ( http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png , { attribution : Map tiles by a href= http://stamen.com Stamen Design /a , a href= http://creativecommons.org/licenses/by/3.0 CC BY 3.0 /a mdash; Map data copy; a href= http://www.openstreetmap.org/copyright OpenStreetMap /a , subdomains : abcd , minZoom : 0 , maxZoom : 20 }) var baseMaps = { Orto : esri , Mapa : osm , Toner : Stamen_Toner }; L . control . layers ( baseMaps , null ). addTo ( map ); L . control . scale (). addTo ( map ); $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); $ ( document ). on ( click , .btn-xs , function () { var attr = $ ( this ). attr ( data ); if ( attr attr . indexOf ( # ) != - 1 ) { var params = attr . split ( # ); var _url = https:// + params [ 1 ] + /api/views.json?method=getByResourceName name= + params [ 0 ]; $ . ajax ({ url : _url , method : GET , dataType : json , success : function ( data ) { if ( data . childViews ) { //var _url2 = https:// + params[1] + /resource/ + data.childViews[0] + .json?$limit=30 ; var _url2 = https:// + params [ 1 ] + /api/geospatial/ + data . childViews [ 0 ] + ?method=export format=GeoJSON ; sendRequestGEOJSON ( _url2 , true ); } else { var _url2 = http:// + params [ 1 ] + /resource/ + params [ 0 ] + .json?$limit=30 ; sendRequestGEOJSON ( _url2 , false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } else { alert ( No resource available ); } }); function clearLayers () { if ( map . hasLayer ( geojsonLayer )) { map . removeLayer ( geojsonLayer ); }; if ( map . hasLayer ( _LL )) { map . removeLayer ( _LL ); }; } function sendRequestGEOJSON ( _url2 , isGeoJson ) { map . spin ( true ); var stylePoint = { radius : 8 , fillColor : #ff7800 , color : #000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }; clearLayers (); $ . ajax ({ type : GET , url : _url2 , // jsonp: $jsonp , // dataType: jsonp , success : function ( response ) { if ( isGeoJson ) { geojsonLayer = L . geoJson ( response , { style : function ( feature ) { return { weight : 2 , color : #999 , opacity : 1 , fillColor : #B0DE5C , fillOpacity : 0.8 }; }, onEachFeature : popUp }). addTo ( map ); map . fitBounds ( geojsonLayer . getBounds ()); map . spin ( false ); } else { _LL = L . featureGroup () for ( var i = 0 ; i response . length ; i ++ ) { var marker = response [ i ]; if ( response [ i ]. location_1 ) { L . circleMarker ([ response [ i ]. location_1 . latitude , response [ i ]. location_1 . longitude ], stylePoint ). addTo ( _LL ); } else if ( response [ i ]. location ) { L . circleMarker ([ response [ i ]. location . latitude , response [ i ]. location . longitude ], stylePoint ). addTo ( _LL ); } else { $ ( #results ). html ( ERROR no locations found ); map . spin ( false ); } } _LL . addTo ( map ); map . panTo ( _LL . getBounds (). getCenter ()); map . spin ( false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); map . spin ( false ); } }); } function popUp ( f , l ) { var out = []; if ( f . properties ) { for ( key in f . properties ) { out . push ( key + : + f . properties [ key ]); } l . bindPopup ( out . join ( br / )); } } function sendRequest () { var _data = { limit : $ ( #num_results_socrata ). val (), only : maps }; console . info ( $ ( #chk_transparencia ). attr ( checked )); if ( $ ( #chk_transparencia ). attr ( checked )) { _data . domains = $ ( #chk_transparencia ). val (); } if ( $ ( #text_filter_socrata ). val () != ) { _data . q = $ ( #text_filter_socrata ). val (); } $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { var cList = $ ( ul ). appendTo ( #mygrid ); $ . each ( data . results , function ( index , value ) { $ ( li class= li b + value . resource . name + : /b + a target= _blank href= + value . link + Link /a + a class= btn btn-success btn-xs href= # data= + value . resource . id + # + value . metadata . domain + Map it /a ). appendTo ( cList ); }); } } else { console . info ( data ); $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrat_mapa.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adimos attribution y download_count a los resultados Note Ejercicio 2 : \u00bfCambiamos colores y estilos de los puntos del mapa? Tip Ejemplos creados downloads/utilizacion-servicio-opendata.zip en nuestro espacio de trabajo. Referencias http://docs.ckan.org/en/latest/api/ http://ckan.org https://www.socrata.com http://docs.socratadiscovery.apiary.io","title":"Creaci\u00f3n de un mapa para ver resultados de Socrata"},{"location":"3_conceptos_vector_tiles/","text":"Conceptos Vector Tiles Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos. Contexto En 2005 GoogleMaps introdujo una \"nueva\" forma de mostrar datos geogr\u00e1ficos por la web, pregenerando el mapa por niveles de zoom y tiles (teselas) de 256x256 pixeles. Tambi\u00e9n cre\u00f3 una nueva proyecci\u00f3n basada en mercator, llamada pseude-mercator o web mercator , cuyo c\u00f3digo EPSG es 3857 Despu\u00e9s de GoogleMaps, otros proveedores o plataformas c\u00f3mo OpenStreetMap siguen esta misma forma de organizar la geoinformaci\u00f3n. Protocolos Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG Vector: (pbf o mvt) Protocolos Existen tres especificaciones para servir tiles TMS (Tile Map Service): X Y coordenadas empiezan de debajo izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba izquierda Caracteristicas Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1xini impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio, en torno a las teselas vectoriales. Cada tile es un contenedor de datos vectores y atributos Los Tiles no tienen estilo, el estilo se aplica en cliente Soporta rotaci\u00f3n y orientaci\u00f3n Soporta extrusi\u00f3n y 3D Herramientas y recursos Fuente: https://github.com/mapbox/awesome-vector-tiles Parsers Generators vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt - geojson support. Clients Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps. Applications / Command line tools Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features. CLI Utilities mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL = 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead Mapbox GL JS Plugins gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps Servers tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2 Low-level utilities vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed Articles Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise. License","title":"3. Conceptos Vector Tiles"},{"location":"3_conceptos_vector_tiles/#conceptos-vector-tiles","text":"Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos.","title":"Conceptos Vector Tiles"},{"location":"3_conceptos_vector_tiles/#contexto","text":"En 2005 GoogleMaps introdujo una \"nueva\" forma de mostrar datos geogr\u00e1ficos por la web, pregenerando el mapa por niveles de zoom y tiles (teselas) de 256x256 pixeles. Tambi\u00e9n cre\u00f3 una nueva proyecci\u00f3n basada en mercator, llamada pseude-mercator o web mercator , cuyo c\u00f3digo EPSG es 3857 Despu\u00e9s de GoogleMaps, otros proveedores o plataformas c\u00f3mo OpenStreetMap siguen esta misma forma de organizar la geoinformaci\u00f3n.","title":"Contexto"},{"location":"3_conceptos_vector_tiles/#protocolos","text":"Para cargar la im\u00e1genes se ulitza una llamada HTTP rest d\u00f3nde se especifica; https://.../.../z/x/y.format Z= Nivel de zoom X=coordenada X Y=coordenada Y Formato Raster: Im\u00e1gen png o JPEG Vector: (pbf o mvt)","title":"Protocolos"},{"location":"3_conceptos_vector_tiles/#protocolos_1","text":"Existen tres especificaciones para servir tiles TMS (Tile Map Service): X Y coordenadas empiezan de debajo izquierda (t\u00edpico eje cartesiano de coordenadas) WMTS (Web Map Tile Service): OGC estandard , corrdenadas empiezan de arriba izquierda. ZXY o \"slippy map\": Igual que TMS pero la Y empieza por arriba izquierda","title":"Protocolos"},{"location":"3_conceptos_vector_tiles/#caracteristicas","text":"Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1xini impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio, en torno a las teselas vectoriales. Cada tile es un contenedor de datos vectores y atributos Los Tiles no tienen estilo, el estilo se aplica en cliente Soporta rotaci\u00f3n y orientaci\u00f3n Soporta extrusi\u00f3n y 3D","title":"Caracteristicas"},{"location":"3_conceptos_vector_tiles/#herramientas-y-recursos","text":"Fuente: https://github.com/mapbox/awesome-vector-tiles","title":"Herramientas y recursos"},{"location":"3_conceptos_vector_tiles/#parsers-generators","text":"vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt - geojson support.","title":"Parsers &amp; Generators"},{"location":"3_conceptos_vector_tiles/#clients","text":"Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps.","title":"Clients"},{"location":"3_conceptos_vector_tiles/#applications-command-line-tools","text":"Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features.","title":"Applications / Command line tools"},{"location":"3_conceptos_vector_tiles/#cli-utilities","text":"mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL = 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead","title":"CLI Utilities"},{"location":"3_conceptos_vector_tiles/#mapbox-gl-js-plugins","text":"gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps","title":"Mapbox GL JS Plugins"},{"location":"3_conceptos_vector_tiles/#servers","text":"tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2","title":"Servers"},{"location":"3_conceptos_vector_tiles/#low-level-utilities","text":"vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed","title":"Low-level utilities"},{"location":"3_conceptos_vector_tiles/#articles","text":"Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise.","title":"Articles"},{"location":"3_conceptos_vector_tiles/#license","text":"","title":"License"},{"location":"4_visualizacion_kepler/","text":"Visualizaci\u00f3n con Kepler.gl Kepler.gl desrrollada por Uber, en u principio para uso interno, para analizar y visualizar sus propios datos. Es una aplicaci\u00f3n basada en web GL de alto rendimiento y agn\u00f3stica de datos para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3n a gran escala. Construido en la parte superior de deck.gl, kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales sobre la marcha. Ejercicio de visualizaci\u00f3n con Kepler.gl Tip Queremos ver d\u00f3nde hay m\u00e1s accidentes Descargamos dataset CSV de OpenData BCN Vamos a http://kepler.gl/#/demo A\u00f1adimos csv Add Layer: Type Hexbin Columns: Latitud Longuitud Color: Scale Quantize Hexagon radius 0.1 Coverage 0.75 Info Continuamos a\u00f1adiendo m\u00e1s capas y mapas bases","title":"4. Visualizaci\u00f3n con Kepler.gl"},{"location":"4_visualizacion_kepler/#visualizacion-con-keplergl","text":"Kepler.gl desrrollada por Uber, en u principio para uso interno, para analizar y visualizar sus propios datos. Es una aplicaci\u00f3n basada en web GL de alto rendimiento y agn\u00f3stica de datos para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3n a gran escala. Construido en la parte superior de deck.gl, kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales sobre la marcha.","title":"Visualizaci\u00f3n con Kepler.gl"},{"location":"4_visualizacion_kepler/#ejercicio-de-visualizacion-con-keplergl","text":"Tip Queremos ver d\u00f3nde hay m\u00e1s accidentes Descargamos dataset CSV de OpenData BCN Vamos a http://kepler.gl/#/demo A\u00f1adimos csv Add Layer: Type Hexbin Columns: Latitud Longuitud Color: Scale Quantize Hexagon radius 0.1 Coverage 0.75 Info Continuamos a\u00f1adiendo m\u00e1s capas y mapas bases","title":"Ejercicio de visualizaci\u00f3n con Kepler.gl"},{"location":"5_herramientas_visualizacion_datos/","text":"Herramientas de visualizaci\u00f3n de datos Librer\u00edas Debido a que los datos que podemos encotrar en un portal de Opendata pueden variar mucho tanto en formato como en el tipo; lo mejor para visualizarlos es utilizar librer\u00edas gen\u00e9ricas de visualizaci\u00f3n de datos. Entre las principales tenemos: https://d3js.org/ https://vega.github.io/vega/ https://p5js.org/examples/ http://www.chartjs.org/ https://www.highcharts.com/products/highcharts/ Servicios Aparte de estas librer\u00edas que nos permiten desarrollar nuestras aplicaciones de visualizaci\u00f3n de datos tambi\u00e9n existen algunos servicios conocidos como BI (Business Intelligence) que aparte de mostrar los datos tambi\u00e9n nos permiten hacer ciertos an\u00e1lisis. Algunos de los principales servicios son: https://www.tableau.com/ https://www.qlik.com/es-es http://www.pentaho.com/ https://powerbi.microsoft.com/es-es/","title":"5. Herramientas de visualizaci\u00f3n de datos"},{"location":"5_herramientas_visualizacion_datos/#herramientas-de-visualizacion-de-datos","text":"","title":"Herramientas de visualizaci\u00f3n de datos"},{"location":"5_herramientas_visualizacion_datos/#librerias","text":"Debido a que los datos que podemos encotrar en un portal de Opendata pueden variar mucho tanto en formato como en el tipo; lo mejor para visualizarlos es utilizar librer\u00edas gen\u00e9ricas de visualizaci\u00f3n de datos. Entre las principales tenemos: https://d3js.org/ https://vega.github.io/vega/ https://p5js.org/examples/ http://www.chartjs.org/ https://www.highcharts.com/products/highcharts/","title":"Librer\u00edas"},{"location":"5_herramientas_visualizacion_datos/#servicios","text":"Aparte de estas librer\u00edas que nos permiten desarrollar nuestras aplicaciones de visualizaci\u00f3n de datos tambi\u00e9n existen algunos servicios conocidos como BI (Business Intelligence) que aparte de mostrar los datos tambi\u00e9n nos permiten hacer ciertos an\u00e1lisis. Algunos de los principales servicios son: https://www.tableau.com/ https://www.qlik.com/es-es http://www.pentaho.com/ https://powerbi.microsoft.com/es-es/","title":"Servicios"},{"location":"6_conceptos_geoservicios/","text":"Conceptos b\u00e1sicos de Geoservicios Recursos La mayor\u00edas de los conceptos son sacados del Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/ Geoservicio Un geoservicio es un servidor que ofrece alg\u00fan servicio relacionado con el \u00e1mbito SIG, su principal funci\u00f3n es acceder a informaci\u00f3n geoespacial existente en diferentes formatos y servir dicha informaci\u00f3n a clientes a trav\u00e9s de protocolos est\u00e1ndares. El servidor es el elemento encargado de ofrecer el servicio como tal, respondiendo a las peticiones del cliente. A medida que los clientes se hacen m\u00e1s complejos y presentan mayor n\u00famero de funcionalidades, tambi\u00e9n los servidores deben ser capaces de proporcionar servicios m\u00e1s elaborados. Las capacidades fundamentales a las que responden los servidores dentro del \u00e1mbito SIG pueden dividirse en los siguientes grupos: Servir representaciones de los datos. Los servicios de cartograf\u00eda Web, tanto en sus or\u00edgenes como en la actualidad, son eminentemente gr\u00e1ficos, y en \u00faltima instancia lo que la aplicaci\u00f3n Web correspondiente va a hacer es mostrarnos alg\u00fan tipo de imagen con un mapa formado a partir de una serie de datos geogr\u00e1ficos. Ejemplo WMS El servidor puede responder directamente a este tipo de necesidades, preparando una imagen a partir de los datos geogr\u00e1ficos de los que dispone. En el caso de que estos sean ya im\u00e1genes \u2014por ejemplo, im\u00e1genes de sat\u00e9lite u ortofotos\u2014, bastar\u00e1 servir estas, transmitiendo una versi\u00f3n escalada de las dimensiones exactas que el cliente necesite para representar en pantalla. En caso de que los datos sean de tipo vectorial, o bien r\u00e1ster sin una forma de representaci\u00f3n impl\u00edcita \u2014por ejemplo, un Modelo Digital del Terreno\u2014 es necesario emplear alg\u00fan m\u00e9todo para asignarles dicha representaci\u00f3n. Este puede ser asignado por defecto por el servidor, que establecer\u00e1 una simbolog\u00eda fija, o bien ofrecer un servicio m\u00e1s complejo en el que el cliente no solo pide una representaci\u00f3n gr\u00e1fica de una serie de datos para una zona dada, sino que adem\u00e1s puede especificar c\u00f3mo crear esa representaci\u00f3n (v\u00eda SLD). Servir los datos directamente. Una opci\u00f3n m\u00e1s flexible que lo anterior es que el servidor provea directamente los datos geogr\u00e1ficos y sea despu\u00e9s el cliente quien los utilice como corresponda, bien sea simplemente represent\u00e1ndolos \u2014en cuyo caso deber\u00eda ser el propio cliente quien establezca la simbolog\u00eda, ya que esta tarea ya no queda en manos del servidor\u2014 o bien trabajando con ellos de cualquier otra forma, como por ejemplo analiz\u00e1ndolos. Ejemplo WFS Aunque las posibilidades son mayores en este caso, se requieren por parte del cliente unas capacidades mayores, ya que mientras que representar una imagen es algo sumamente sencillo desde el punto de vista t\u00e9cnico, crear esta a partir de los datos geogr\u00e1ficos es m\u00e1s complejo. Servir consultas. Un paso m\u00e1s all\u00e1 en la funcionalidad que puede ofrecer el servidor es responder a preguntas realizadas por el cliente relativas a los datos, ya sean estas relativas a la parte espacial de dichos datos, o bien a su componente tem\u00e1tica. El servidor puede ofrecer como respuesta conjuntos reducidos de los datos de los que dispone, o valores que describan a estos. Estas consultas pueden ser \u00fatiles, por ejemplo, para establecer filtros previos cuando se dispone de un conjunto amplio de or\u00edgenes de datos. Un cliente Web puede obtener datos de distintos servidores, y puede consultar si, para un zona dada, estos servidores disponen de informaci\u00f3n, sin m\u00e1s que consultar la extensi\u00f3n cubierta por los datos de cada uno de ellos y comprobar si se interseca con la regi\u00f3n de inter\u00e9s. En funci\u00f3n de la respuesta, puede o no realizarse posteriormente el acceso a los datos en s\u00ed. Ejemplo CSW Servir procesos. Por \u00faltimo, un servidor puede ofrecer nuevos datos, espaciales o no espaciales, resultantes de alg\u00fan tipo de proceso o c\u00e1lculo a partir de datos espaciales. En este caso, el proceso constituye en s\u00ed el servicio ofrecido por el servidor, y el cliente debe definir los par\u00e1metros de entrada de este y los posibles par\u00e1metros de ajuste que resulten necesarios. Los datos con los que se trabaja pueden ser proporcionados por el cliente, incorpor\u00e1ndolos a su propia petici\u00f3n, o bien pueden residir en el propio servidor. En este \u00faltimo caso, el servidor ofrece tanto los datos, como la posibilidad de extraer resultados a partir de ellos, es decir, los datos y una herramienta para explotarlos. Tambi\u00e9n pueden emplearse datos en un servidor distinto, a los que el servidor de procesos puede acceder si estos est\u00e1n disponibles, convirti\u00e9ndose en cliente de ese segundo servidor. Las posibilidades que estos servicios brindan son muy numerosas. Por una parte, pueden a\u00f1adirse funcionalidades avanzadas a interfaces Web, llevando a estas las capacidades propias de los SIG de escritorio. Por otra, la difusi\u00f3n de algoritmos de an\u00e1lisis geogr\u00e1fico resulta m\u00e1s sencilla, pudiendo ofrecerse estos a todo tipo de usuarios sin necesidad de ning\u00fan software especializado. Y por \u00faltimo, en ciertos casos pueden rebajarse los tiempos de proceso, ya que, en el caso de operaciones complejas, la mayor potencia del servidor respecto al cliente puede resultar en un mayor rendimiento. El reparto de tareas entre varios servidores (computaci\u00f3n distribuida) es otra de las posibilidades que pueden a su vez ampliar la eficiencia de los procesos. Referencias Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/","title":"6. Conceptos b\u00e1sicos de Geoservicios"},{"location":"6_conceptos_geoservicios/#conceptos-basicos-de-geoservicios","text":"Recursos La mayor\u00edas de los conceptos son sacados del Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/","title":"Conceptos b\u00e1sicos de Geoservicios"},{"location":"6_conceptos_geoservicios/#geoservicio","text":"Un geoservicio es un servidor que ofrece alg\u00fan servicio relacionado con el \u00e1mbito SIG, su principal funci\u00f3n es acceder a informaci\u00f3n geoespacial existente en diferentes formatos y servir dicha informaci\u00f3n a clientes a trav\u00e9s de protocolos est\u00e1ndares. El servidor es el elemento encargado de ofrecer el servicio como tal, respondiendo a las peticiones del cliente. A medida que los clientes se hacen m\u00e1s complejos y presentan mayor n\u00famero de funcionalidades, tambi\u00e9n los servidores deben ser capaces de proporcionar servicios m\u00e1s elaborados. Las capacidades fundamentales a las que responden los servidores dentro del \u00e1mbito SIG pueden dividirse en los siguientes grupos: Servir representaciones de los datos. Los servicios de cartograf\u00eda Web, tanto en sus or\u00edgenes como en la actualidad, son eminentemente gr\u00e1ficos, y en \u00faltima instancia lo que la aplicaci\u00f3n Web correspondiente va a hacer es mostrarnos alg\u00fan tipo de imagen con un mapa formado a partir de una serie de datos geogr\u00e1ficos. Ejemplo WMS El servidor puede responder directamente a este tipo de necesidades, preparando una imagen a partir de los datos geogr\u00e1ficos de los que dispone. En el caso de que estos sean ya im\u00e1genes \u2014por ejemplo, im\u00e1genes de sat\u00e9lite u ortofotos\u2014, bastar\u00e1 servir estas, transmitiendo una versi\u00f3n escalada de las dimensiones exactas que el cliente necesite para representar en pantalla. En caso de que los datos sean de tipo vectorial, o bien r\u00e1ster sin una forma de representaci\u00f3n impl\u00edcita \u2014por ejemplo, un Modelo Digital del Terreno\u2014 es necesario emplear alg\u00fan m\u00e9todo para asignarles dicha representaci\u00f3n. Este puede ser asignado por defecto por el servidor, que establecer\u00e1 una simbolog\u00eda fija, o bien ofrecer un servicio m\u00e1s complejo en el que el cliente no solo pide una representaci\u00f3n gr\u00e1fica de una serie de datos para una zona dada, sino que adem\u00e1s puede especificar c\u00f3mo crear esa representaci\u00f3n (v\u00eda SLD). Servir los datos directamente. Una opci\u00f3n m\u00e1s flexible que lo anterior es que el servidor provea directamente los datos geogr\u00e1ficos y sea despu\u00e9s el cliente quien los utilice como corresponda, bien sea simplemente represent\u00e1ndolos \u2014en cuyo caso deber\u00eda ser el propio cliente quien establezca la simbolog\u00eda, ya que esta tarea ya no queda en manos del servidor\u2014 o bien trabajando con ellos de cualquier otra forma, como por ejemplo analiz\u00e1ndolos. Ejemplo WFS Aunque las posibilidades son mayores en este caso, se requieren por parte del cliente unas capacidades mayores, ya que mientras que representar una imagen es algo sumamente sencillo desde el punto de vista t\u00e9cnico, crear esta a partir de los datos geogr\u00e1ficos es m\u00e1s complejo. Servir consultas. Un paso m\u00e1s all\u00e1 en la funcionalidad que puede ofrecer el servidor es responder a preguntas realizadas por el cliente relativas a los datos, ya sean estas relativas a la parte espacial de dichos datos, o bien a su componente tem\u00e1tica. El servidor puede ofrecer como respuesta conjuntos reducidos de los datos de los que dispone, o valores que describan a estos. Estas consultas pueden ser \u00fatiles, por ejemplo, para establecer filtros previos cuando se dispone de un conjunto amplio de or\u00edgenes de datos. Un cliente Web puede obtener datos de distintos servidores, y puede consultar si, para un zona dada, estos servidores disponen de informaci\u00f3n, sin m\u00e1s que consultar la extensi\u00f3n cubierta por los datos de cada uno de ellos y comprobar si se interseca con la regi\u00f3n de inter\u00e9s. En funci\u00f3n de la respuesta, puede o no realizarse posteriormente el acceso a los datos en s\u00ed. Ejemplo CSW Servir procesos. Por \u00faltimo, un servidor puede ofrecer nuevos datos, espaciales o no espaciales, resultantes de alg\u00fan tipo de proceso o c\u00e1lculo a partir de datos espaciales. En este caso, el proceso constituye en s\u00ed el servicio ofrecido por el servidor, y el cliente debe definir los par\u00e1metros de entrada de este y los posibles par\u00e1metros de ajuste que resulten necesarios. Los datos con los que se trabaja pueden ser proporcionados por el cliente, incorpor\u00e1ndolos a su propia petici\u00f3n, o bien pueden residir en el propio servidor. En este \u00faltimo caso, el servidor ofrece tanto los datos, como la posibilidad de extraer resultados a partir de ellos, es decir, los datos y una herramienta para explotarlos. Tambi\u00e9n pueden emplearse datos en un servidor distinto, a los que el servidor de procesos puede acceder si estos est\u00e1n disponibles, convirti\u00e9ndose en cliente de ese segundo servidor. Las posibilidades que estos servicios brindan son muy numerosas. Por una parte, pueden a\u00f1adirse funcionalidades avanzadas a interfaces Web, llevando a estas las capacidades propias de los SIG de escritorio. Por otra, la difusi\u00f3n de algoritmos de an\u00e1lisis geogr\u00e1fico resulta m\u00e1s sencilla, pudiendo ofrecerse estos a todo tipo de usuarios sin necesidad de ning\u00fan software especializado. Y por \u00faltimo, en ciertos casos pueden rebajarse los tiempos de proceso, ya que, en el caso de operaciones complejas, la mayor potencia del servidor respecto al cliente puede resultar en un mayor rendimiento. El reparto de tareas entre varios servidores (computaci\u00f3n distribuida) es otra de las posibilidades que pueden a su vez ampliar la eficiencia de los procesos.","title":"Geoservicio"},{"location":"6_conceptos_geoservicios/#referencias","text":"Libro libre SIG de Victor Olaya http://volaya.github.io/libro-sig/","title":"Referencias"},{"location":"7_consideraciones_servicios_opendata/","text":"Consideraciones sobre servicios Open data Problemas frecuentes al trabajar con servicios Open Data Ausencia de normalizaci\u00f3n u homogeneidad en los portales y servicios. Datos en formatos cerrados o no reutilizables como el pdf. Cambio de las direcciones de los recursos. Por ejemplo, suele ocurrir que cuando se cambia el nombre de un servidor \u00f3 la t\u00e9cnolog\u00eda del portal ocasiona un cambio en las URLs y dejan de funcionar las aplicaciones y servicios que consumen esos datos. Datos poco fiables, err\u00f3neos, inconsistentes. Falta de normalizaci\u00f3n y homogeneidad tambi\u00e9n en los datos. Ejemplo https://analisi.transparenciacatalunya.cat/Urbanisme-infraestructures/Equipaments-de-Catalunya/8gmd-gz7i Ejemplo de buenas pr\u00e1cticas Un buen ejemplo de servicios realtime Open Data son los servicios de notificaci\u00f3n de terremotos de el USGS porque est\u00e1n muy bien documentados, tienen salida en m\u00faltiples formatos, son gratuitos y de libre acceso y ofrecen diferentes niveles de usuarios (programadores y no programadores) https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php Ejemplo de \"malas\" pr\u00e1cticas En el servicio OpenData de la AEMET http://www.aemet.es/es/datos_abiertos/AEMET_OpenData observamos que nos solicitan una API Key para acceder a los servicios y para obtenerla hay que dar una direcci\u00f3n de email y resolver un captcha, lo que constituye una barrera de entrada. Luego, existe una diferencia clara entre desarrolladores y el acceso general. Y en ninguno de los perfiles de usuarios hay un acceso f\u00e1cil, directo y claro a la informaci\u00f3n. Lo vemos cuando solicitamos un recurso, que nos retorna un json apuntando a otro recurso. Ejemplo https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/08001?api_key=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJib2xvc2lnQGdtYWlsLmNvbSIsImp0aSI6ImFkMzFlYjhmLTYxYmQtNGUxMi05Y2E0LTE4MGU4M2UzYzkwNSIsImlzcyI6IkFFTUVUIiwiaWF0IjoxNTExOTgzOTI2LCJ1c2VySWQiOiJhZDMxZWI4Zi02MWJkLTRlMTItOWNhNC0xODBlODNlM2M5MDUiLCJyb2xlIjoiIn0.YYQ93aedA5RM6WTp8XR-gDw3XyMeMxYrCEddDbSpwhU Retorna 1 2 3 4 5 6 { descripcion : exito , estado : 200 , datos : https://opendata.aemet.es/opendata/sh/36188a6b , metadatos : https://opendata.aemet.es/opendata/sh/dfd88b22 } Datos https://opendata.aemet.es/opendata/sh/36188a6b Metadatos https://opendata.aemet.es/opendata/sh/dfd88b22","title":"7. Consideraciones sobre servicios Open data"},{"location":"7_consideraciones_servicios_opendata/#consideraciones-sobre-servicios-open-data","text":"","title":"Consideraciones sobre servicios Open data"},{"location":"7_consideraciones_servicios_opendata/#problemas-frecuentes-al-trabajar-con-servicios-open-data","text":"Ausencia de normalizaci\u00f3n u homogeneidad en los portales y servicios. Datos en formatos cerrados o no reutilizables como el pdf. Cambio de las direcciones de los recursos. Por ejemplo, suele ocurrir que cuando se cambia el nombre de un servidor \u00f3 la t\u00e9cnolog\u00eda del portal ocasiona un cambio en las URLs y dejan de funcionar las aplicaciones y servicios que consumen esos datos. Datos poco fiables, err\u00f3neos, inconsistentes. Falta de normalizaci\u00f3n y homogeneidad tambi\u00e9n en los datos. Ejemplo https://analisi.transparenciacatalunya.cat/Urbanisme-infraestructures/Equipaments-de-Catalunya/8gmd-gz7i","title":"Problemas frecuentes al trabajar con servicios Open Data"},{"location":"7_consideraciones_servicios_opendata/#ejemplo-de-buenas-practicas","text":"Un buen ejemplo de servicios realtime Open Data son los servicios de notificaci\u00f3n de terremotos de el USGS porque est\u00e1n muy bien documentados, tienen salida en m\u00faltiples formatos, son gratuitos y de libre acceso y ofrecen diferentes niveles de usuarios (programadores y no programadores) https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php","title":"Ejemplo de buenas pr\u00e1cticas"},{"location":"7_consideraciones_servicios_opendata/#ejemplo-de-malas-practicas","text":"En el servicio OpenData de la AEMET http://www.aemet.es/es/datos_abiertos/AEMET_OpenData observamos que nos solicitan una API Key para acceder a los servicios y para obtenerla hay que dar una direcci\u00f3n de email y resolver un captcha, lo que constituye una barrera de entrada. Luego, existe una diferencia clara entre desarrolladores y el acceso general. Y en ninguno de los perfiles de usuarios hay un acceso f\u00e1cil, directo y claro a la informaci\u00f3n. Lo vemos cuando solicitamos un recurso, que nos retorna un json apuntando a otro recurso. Ejemplo https://opendata.aemet.es/opendata/api/prediccion/especifica/municipio/diaria/08001?api_key=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJib2xvc2lnQGdtYWlsLmNvbSIsImp0aSI6ImFkMzFlYjhmLTYxYmQtNGUxMi05Y2E0LTE4MGU4M2UzYzkwNSIsImlzcyI6IkFFTUVUIiwiaWF0IjoxNTExOTgzOTI2LCJ1c2VySWQiOiJhZDMxZWI4Zi02MWJkLTRlMTItOWNhNC0xODBlODNlM2M5MDUiLCJyb2xlIjoiIn0.YYQ93aedA5RM6WTp8XR-gDw3XyMeMxYrCEddDbSpwhU Retorna 1 2 3 4 5 6 { descripcion : exito , estado : 200 , datos : https://opendata.aemet.es/opendata/sh/36188a6b , metadatos : https://opendata.aemet.es/opendata/sh/dfd88b22 } Datos https://opendata.aemet.es/opendata/sh/36188a6b Metadatos https://opendata.aemet.es/opendata/sh/dfd88b22","title":"Ejemplo de \"malas\" pr\u00e1cticas"},{"location":"8_ejemplo_servicio_bicing_bcn/","text":"Ejemplo servicio bicing Barcelona Acceso al servicio de datos del Bicing de Barcelona En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso bicing.json url servicio de bicing Al abrir la url http://wservice.viabicing.cat/v2/stations en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la disponibilidad de bicis, las estaciones m\u00e1s cercanas, etc. Mapa que utiliza este servicio, Ejemplo creado en la plataforma Instamaps El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Leaflet. 2 Creaci\u00f3n de un visor Crer una carpeta con el nombre de visor-bicing . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Agregar el plugin para cargar datos en tiempo real. Para ellos utilizaremos el plugin Leaflet Realtime 3 . Copiar lo siguiente justo despu\u00e9s de cuando carguemos la libreria de Leaflet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Agregar la capa de realtime del bicing a nuestro mapa. Siguiendo el ejemplo b\u00e1sico del plugin para cagar una capa, copiar lo siguiente al final de nuestro c\u00f3digo de javascript. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var realtime = L . realtime ({ url : http://wservice.viabicing.cat/v2/stations , crossOrigin : true , type : json }, { interval : 3 * 1000 }). addTo ( map ); / script / body / html Recargar la p\u00e1gina para visualizar nuestra capa de bicing. Observaremos que no aparece ning\u00fan dato, esto es debido a que estamos llamando a un servicio que no est\u00e1 en nuestro dominio y nos da un error de CORS 4 . Abrir la consola de desarrollador del navegador presionando F12 y veremos que cada 3 segundos aparecer\u00e1 un error. Para evitar el error de CORS necesitamos un proxy 5 en nuestro servidor web que pueda hacer la llamada al servicio de bicing y que nos devuelva el contenido. Creaci\u00f3n del proxy Instalar Node.js 6 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir 1 node -v Navegar hasta nuestra carpeta visor-bicing y escribir 1 npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 7 como servidor web y el m\u00f3dulo http-proxy 8 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el http-proxy y guardarlo en la lista de dependencias 1 npm install http-proxy --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de Bicing. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverBicing = http://wservice.viabicing.cat/v2/stations ; app . use ( express . static ( public )); app . all ( /bicing/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverBicing , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribiendo: 1 node app.js Abrir la url de nuestro proxy http://localhost:3000/bicing/ en el navegador. Crear una carpeta llamada public dentro de nuestra carpeta y mover el archivo index.html dentro de esa carpeta. Con esto ya podemos ver nuestra aplicaci\u00f3n del mapa servida desde un servidor web y no abriendola directamente como hab\u00edamos hecho hasta ahora. Escribir en el navegador http://localhost:3000 para ver nuestro mapa. Modificar el mapa Modificar el archivo index.html para que llame al proxy que hemos creado. Cambiar la url del servicio de bicing http://wservice.viabicing.cat/v2/stations por nuestro proxy http://localhost:3000/bicing/ (como el proxy y la aplicaci\u00f3n est\u00e1n en el mismo servidor podr\u00edamos usar /bicing/ ). Recargar la aplicaci\u00f3n con Ctrl+F5 y veremos que el error que nos da ahora es diferente. En este caso el error es Error: Invalid GeoJSON object. . Este error es debido a lo que ya comentamos; la respuesta del servicio de Bicing no es un GeoJSON. Crear una variable llamada geojson que ser\u00e1 la que contendr\u00e1 el GeoJSON resultante de la transformaci\u00f3n, antes de la declaraci\u00f3n de nuestra capa de realtime 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojson = { type : FeatureCollection , features : [] }; var realtime = L . realtime ({ url : http://wservice.viabicing.cat/v2/stations , crossOrigin : true , type : json }, { interval : 3 * 1000 }). addTo ( map ); / script / body / html Modificar la aplicaci\u00f3n para transformar la respuesta del bicing en un GeoJSON. Modificar nuestra capa realtime con el siguiente c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojson = { type : FeatureCollection , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( /bicing/ ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . stations ; for ( var i = stations . length - 1 ; i = 0 ; i -- ) { var station = stations [ i ]; var feature = { type : Feature , properties : { altitude : station . altitude , bikes : station . bikes , id : station . id , nearbyStations : station . nearbyStations , slots : station . slots , status : station . status , streetName : station . streetName , streetNumber : station . streetNumber , type : station . type }, geometry : { type : Point , coordinates : [ station . longitude , station . latitude ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 }). addTo ( map ); / script / body / html Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada a nuestro proxy. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir justo despu\u00e9s de donde definimos el intervalo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojson = { type : FeatureCollection , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( /bicing/ ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . stations ; for ( var i = stations . length - 1 ; i = 0 ; i -- ) { var station = stations [ i ]; var feature = { type : Feature , properties : { altitude : station . altitude , bikes : station . bikes , id : station . id , nearbyStations : station . nearbyStations , slots : station . slots , status : station . status , streetName : station . streetName , streetNumber : station . streetNumber , type : station . type }, geometry : { type : Point , coordinates : [ station . longitude , station . latitude ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 , onEachFeature ( f , l ) { l . bindPopup ( function () { return h3 + f . properties . id + /h3 + p + f . properties . streetName + br/ bike: strong + f . properties . bikes + /strong /p + p slots: + f . properties . slots + /p ; }); } },). addTo ( map ); / script / body / html Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. mapa de servicio de bicing Referencias https://es.wikipedia.org/wiki/GeoJSON http://leafletjs.com/ https://github.com/perliedman/leaflet-realtime https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS https://es.wikipedia.org/wiki/Servidor_proxy https://nodejs.org/es/ http://expressjs.com/ https://github.com/nodejitsu/node-http-proxy","title":"8. Ejemplo servicio bicing Barcelona"},{"location":"8_ejemplo_servicio_bicing_bcn/#ejemplo-servicio-bicing-barcelona","text":"","title":"Ejemplo servicio bicing Barcelona"},{"location":"8_ejemplo_servicio_bicing_bcn/#acceso-al-servicio-de-datos-del-bicing-de-barcelona","text":"En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso bicing.json url servicio de bicing Al abrir la url http://wservice.viabicing.cat/v2/stations en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la disponibilidad de bicis, las estaciones m\u00e1s cercanas, etc. Mapa que utiliza este servicio, Ejemplo creado en la plataforma Instamaps El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Leaflet. 2","title":"Acceso al servicio de datos del Bicing de Barcelona"},{"location":"8_ejemplo_servicio_bicing_bcn/#creacion-de-un-visor","text":"Crer una carpeta con el nombre de visor-bicing . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Agregar el plugin para cargar datos en tiempo real. Para ellos utilizaremos el plugin Leaflet Realtime 3 . Copiar lo siguiente justo despu\u00e9s de cuando carguemos la libreria de Leaflet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); / script / body / html Agregar la capa de realtime del bicing a nuestro mapa. Siguiendo el ejemplo b\u00e1sico del plugin para cagar una capa, copiar lo siguiente al final de nuestro c\u00f3digo de javascript. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var realtime = L . realtime ({ url : http://wservice.viabicing.cat/v2/stations , crossOrigin : true , type : json }, { interval : 3 * 1000 }). addTo ( map ); / script / body / html Recargar la p\u00e1gina para visualizar nuestra capa de bicing. Observaremos que no aparece ning\u00fan dato, esto es debido a que estamos llamando a un servicio que no est\u00e1 en nuestro dominio y nos da un error de CORS 4 . Abrir la consola de desarrollador del navegador presionando F12 y veremos que cada 3 segundos aparecer\u00e1 un error. Para evitar el error de CORS necesitamos un proxy 5 en nuestro servidor web que pueda hacer la llamada al servicio de bicing y que nos devuelva el contenido.","title":"Creaci\u00f3n de un visor"},{"location":"8_ejemplo_servicio_bicing_bcn/#creacion-del-proxy","text":"Instalar Node.js 6 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir 1 node -v Navegar hasta nuestra carpeta visor-bicing y escribir 1 npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy. En este caso utilizaremos Express 7 como servidor web y el m\u00f3dulo http-proxy 8 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el http-proxy y guardarlo en la lista de dependencias 1 npm install http-proxy --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de Bicing. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 var express = require ( express ); var app = express (); var httpProxy = require ( http-proxy ); var apiProxy = httpProxy . createProxyServer (); var serverBicing = http://wservice.viabicing.cat/v2/stations ; app . use ( express . static ( public )); app . all ( /bicing/* , function ( req , res ) { console . log ( redirecting to Server1 ); apiProxy . web ( req , res , { target : serverBicing , changeOrigin : false , ignorePath : true }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribiendo: 1 node app.js Abrir la url de nuestro proxy http://localhost:3000/bicing/ en el navegador. Crear una carpeta llamada public dentro de nuestra carpeta y mover el archivo index.html dentro de esa carpeta. Con esto ya podemos ver nuestra aplicaci\u00f3n del mapa servida desde un servidor web y no abriendola directamente como hab\u00edamos hecho hasta ahora. Escribir en el navegador http://localhost:3000 para ver nuestro mapa.","title":"Creaci\u00f3n del proxy"},{"location":"8_ejemplo_servicio_bicing_bcn/#modificar-el-mapa","text":"Modificar el archivo index.html para que llame al proxy que hemos creado. Cambiar la url del servicio de bicing http://wservice.viabicing.cat/v2/stations por nuestro proxy http://localhost:3000/bicing/ (como el proxy y la aplicaci\u00f3n est\u00e1n en el mismo servidor podr\u00edamos usar /bicing/ ). Recargar la aplicaci\u00f3n con Ctrl+F5 y veremos que el error que nos da ahora es diferente. En este caso el error es Error: Invalid GeoJSON object. . Este error es debido a lo que ya comentamos; la respuesta del servicio de Bicing no es un GeoJSON. Crear una variable llamada geojson que ser\u00e1 la que contendr\u00e1 el GeoJSON resultante de la transformaci\u00f3n, antes de la declaraci\u00f3n de nuestra capa de realtime 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojson = { type : FeatureCollection , features : [] }; var realtime = L . realtime ({ url : http://wservice.viabicing.cat/v2/stations , crossOrigin : true , type : json }, { interval : 3 * 1000 }). addTo ( map ); / script / body / html Modificar la aplicaci\u00f3n para transformar la respuesta del bicing en un GeoJSON. Modificar nuestra capa realtime con el siguiente c\u00f3digo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojson = { type : FeatureCollection , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( /bicing/ ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . stations ; for ( var i = stations . length - 1 ; i = 0 ; i -- ) { var station = stations [ i ]; var feature = { type : Feature , properties : { altitude : station . altitude , bikes : station . bikes , id : station . id , nearbyStations : station . nearbyStations , slots : station . slots , status : station . status , streetName : station . streetName , streetNumber : station . streetNumber , type : station . type }, geometry : { type : Point , coordinates : [ station . longitude , station . latitude ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 }). addTo ( map ); / script / body / html Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada a nuestro proxy. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir justo despu\u00e9s de donde definimos el intervalo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 !DOCTYPE html html head title Servicio de Bicing realtime / title link rel = stylesheet href = https://unpkg.com/leaflet@1.2.0/dist/leaflet.css / style # map { position : absolute ; top : 0 ; left : 0 ; bottom : 0 ; right : 0 ; } / style / head body div id = map / div script src = https://unpkg.com/leaflet@1.2.0/dist/leaflet.js / script script src = https://cdnjs.cloudflare.com/ajax/libs/leaflet-realtime/2.1.0/leaflet-realtime.min.js / script script type = text/javascript var map = L . map ( map ); map . setView ([ 41.3887 , 2.1777 ], 13 ); L . tileLayer ( http://{s}.tile.osm.org/{z}/{x}/{y}.png , { attribution : copy; a href= http://osm.org/copyright OpenStreetMap /a contributors }). addTo ( map ); var geojson = { type : FeatureCollection , features : [] }; var realtime = L . realtime ( function ( success , error ) { fetch ( /bicing/ ) . then ( function ( response ) { return response . json (); }) . then ( function ( data ) { var stations = data . stations ; for ( var i = stations . length - 1 ; i = 0 ; i -- ) { var station = stations [ i ]; var feature = { type : Feature , properties : { altitude : station . altitude , bikes : station . bikes , id : station . id , nearbyStations : station . nearbyStations , slots : station . slots , status : station . status , streetName : station . streetName , streetNumber : station . streetNumber , type : station . type }, geometry : { type : Point , coordinates : [ station . longitude , station . latitude ] } }; geojson . features . push ( feature ); } success ( geojson ); }) . catch ( error ); }, { interval : 3 * 1000 , onEachFeature ( f , l ) { l . bindPopup ( function () { return h3 + f . properties . id + /h3 + p + f . properties . streetName + br/ bike: strong + f . properties . bikes + /strong /p + p slots: + f . properties . slots + /p ; }); } },). addTo ( map ); / script / body / html Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. mapa de servicio de bicing","title":"Modificar el mapa"},{"location":"8_ejemplo_servicio_bicing_bcn/#referencias","text":"https://es.wikipedia.org/wiki/GeoJSON http://leafletjs.com/ https://github.com/perliedman/leaflet-realtime https://developer.mozilla.org/es/docs/Web/HTTP/Access_control_CORS https://es.wikipedia.org/wiki/Servidor_proxy https://nodejs.org/es/ http://expressjs.com/ https://github.com/nodejitsu/node-http-proxy","title":"Referencias"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/","text":"Ejemplo servicio bicing Barcelona VectorTiles Acceso al servicio de datos del Bicing de Barcelona En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso bicing.json url servicio de bicing Al abrir la url http://wservice.viabicing.cat/v2/stations en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la disponibilidad de bicis, las estaciones m\u00e1s cercanas, etc. Mapa que utiliza este servicio, Ejemplo creado en la plataforma Instamaps El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Mapbox GL JS. 2 Creaci\u00f3n de un visor Crer una carpeta con el nombre de visor-bicing-vt . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); / script / body / html Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona. Creaci\u00f3n del proxy Instalar Node.js 3 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir 1 node -v Navegar hasta nuestra carpeta visor-bicing-vt y escribir: 1 npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy 4 . En este caso utilizaremos Express 5 como servidor web y el m\u00f3dulo axios 6 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el axios y guardarlo en la lista de dependencias 1 npm install axios --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de Bicing. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 var express = require ( express ); var app = express (); var axios = require ( axios ); var serverBicing = http://wservice.viabicing.cat/v2/stations ; app . use ( express . static ( public )); app . all ( /bicingjson/* , function ( req , res ) { console . log ( redirecting to Server2 ); var geojson = { type : FeatureCollection , features : [] }; axios . get ( serverBicing ). then ( function ( response ){ // handle success var stations = response . data . stations ; for ( var i = stations . length - 1 ; i = 0 ; i -- ) { var station = stations [ i ]; var feature = { type : Feature , properties : { altitude : station . altitude , bikes : station . bikes , id : station . id , nearbyStations : station . nearbyStations , slots : station . slots , status : station . status , streetName : station . streetName , streetNumber : station . streetNumber , type : station . type }, geometry : { type : Point , coordinates : [ station . longitude , station . latitude ] } }; geojson . features . push ( feature ); } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribiendo: 1 node app.js Abrir la url de nuestro proxy http://localhost:3000/bicingjson/ en el navegador. Crear una carpeta llamada public dentro de nuestra carpeta y mover el archivo index.html dentro de esa carpeta. Con esto ya podemos ver nuestra aplicaci\u00f3n del mapa servida desde un servidor web y no abriendola directamente como hab\u00edamos hecho hasta ahora. Escribir en el navegador http://localhost:3000 para ver nuestro mapa. Modificar el visor Modificar el archivo index.html para que llame al proxy que hemos creado y cargue la capa de bicing. Escribir justo despues de la declaraci\u00f3n del mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : 6 , circle-color : #B42222 }, }); }); / script / body / html Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Actualizar los datos del mapa. Para actualizar los datos del mapa se debe recargar la capa de estaciones de bicing cada X tiempo. Para recargar la capa cada 3 segundos escribir los siguiente al final de la funci\u00f3n que se llama al terminar de cargar el estilo del mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : 6 , circle-color : #B42222 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); / script / body / html Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada a nuestro proxy. Cambiar el estilo de la capa de estaciones de bicing. Para representar las estaciones con un estilo basado en los valores de algunos de sus atributos utilizar el data-driven style siguiendo la especificaci\u00f3n de estilo de Mapbox 7 . Modificar la propiedad paint de la capa y escribir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : [ interpolate , [ linear ], [ to-number , [ get , slots ]], 0 , 5 , 15 , 33 ], circle-color : [ interpolate , [ linear ], [ to-number , [ get , bikes ]], 0 , hsl(0, 88%, 55%) , 37 , hsl(108, 93%, 59%) ], circle-opacity : 0.86 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); / script / body / html Recargar la aplicaci\u00f3n y veremos el cambio de estilo de los puntos de las estaciones de bicing. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir despu\u00e9s de donde definimos el onload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : [ interpolate , [ linear ], [ to-number , [ get , slots ]], 0 , 5 , 15 , 33 ], circle-color : [ interpolate , [ linear ], [ to-number , [ get , bikes ]], 0 , hsl(0, 88%, 55%) , 37 , hsl(108, 93%, 59%) ], circle-opacity : 0.86 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); map . on ( click , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ bicing ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( div id=\\ popup\\ class=\\ popup\\ style=\\ z-index: 10;\\ h5 + feature . properties . id + /h5 + ul class=\\ list-group\\ + li class=\\ list-group-item\\ + feature . properties . streetName + /li + li class=\\ list-group-item\\ Bikes: + feature . properties . bikes + /li + li class=\\ list-group-item\\ slots: + feature . properties . slots + /li /ul /div ) . addTo ( map ); }); / script / body / html Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. Cambiar el tipo de cursor al pasar sobre una estaci\u00f3n. Escribir despu\u00e9s de donde definimos el onload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : [ interpolate , [ linear ], [ to-number , [ get , slots ]], 0 , 5 , 15 , 33 ], circle-color : [ interpolate , [ linear ], [ to-number , [ get , bikes ]], 0 , hsl(0, 88%, 55%) , 37 , hsl(108, 93%, 59%) ], circle-opacity : 0.86 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); map . on ( click , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ bicing ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( div id=\\ popup\\ class=\\ popup\\ style=\\ z-index: 10;\\ h5 + feature . properties . id + /h5 + ul class=\\ list-group\\ + li class=\\ list-group-item\\ + feature . properties . streetName + /li + li class=\\ list-group-item\\ Bikes: + feature . properties . bikes + /li + li class=\\ list-group-item\\ slots: + feature . properties . slots + /li /ul /div ) . addTo ( map ); }); // Use the same approach as above to indicate that the symbols are clickable // by changing the cursor style to pointer map . on ( mousemove , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ bicing ] }); map . getCanvas (). style . cursor = features . length ? pointer : ; }); / script / body / html Recargar la p\u00e1gina y pasar sobre alguna estaci\u00f3n para ver el cambio del cursor. mapa de servicio de bicing Ejercicio Cambiar el estilo de los puntos de las estaciones. Cambiar los rangos del tama\u00f1o del punto y cambiar el rango de colores. Referencias https://es.wikipedia.org/wiki/GeoJSON https://www.mapbox.com/mapbox-gl-js/api/ https://nodejs.org/es/ https://es.wikipedia.org/wiki/Servidor_proxy http://expressjs.com/ https://github.com/axios/axios https://www.mapbox.com/mapbox-gl-js/style-spec","title":"9. Ejemplo servicio bicing Barcelona (VectorTiles)"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/#ejemplo-servicio-bicing-barcelona-vectortiles","text":"","title":"Ejemplo servicio bicing Barcelona VectorTiles"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/#acceso-al-servicio-de-datos-del-bicing-de-barcelona","text":"En el portal Open data del Ayuntamiento de Barcelona podemos encontrar un dataset (conjunto de datos) que contiene las estaciones del servicio de Bicing Si bien el Ayuntamiento de Barcelona no ofrece explicitamente el acceso a los datos del Bicing como un servicio, si que tiene un servicio de datos en tiempo real. La url la podemos encontrar presionando el bot\u00f3n de Descargar del recurso bicing.json url servicio de bicing Al abrir la url http://wservice.viabicing.cat/v2/stations en nuestro navegador observaremos que la respuesta es un archivo json con un conjunto de elementos que tienen las coordenadas de la localizaci\u00f3n de la estaci\u00f3n de bicing, la disponibilidad de bicis, las estaciones m\u00e1s cercanas, etc. Mapa que utiliza este servicio, Ejemplo creado en la plataforma Instamaps El archivo json que retorna el servicio tiene coordenadas pero no es un fichero GeoJSON. 1 Para ver estos datos sobre un mapa crearemos un visor utilizando Mapbox GL JS. 2","title":"Acceso al servicio de datos del Bicing de Barcelona"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/#creacion-de-un-visor","text":"Crer una carpeta con el nombre de visor-bicing-vt . Crear un archivo con el nombre de index.html dentro de la carpeta Abrir el archivo index.html con un editor de texto y copiar el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); / script / body / html Abrir el archivo index.html en el navegador para ver que carga un mapa centrado en Barcelona.","title":"Creaci\u00f3n de un visor"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/#creacion-del-proxy","text":"Instalar Node.js 3 . Descargar la \u00faltima versi\u00f3n LTS (en este momento es la 10.13.0 LTS) y lo instalaremos con las opciones por defecto. Una vez instalado el Node abrir la consola para verificar que se ha instalado correctamente. Escribir 1 node -v Navegar hasta nuestra carpeta visor-bicing-vt y escribir: 1 npm init Con este comando estaremos creando el archivo package.json . Este comando solicita varios elementos como, por ejemplo, el nombre y la versi\u00f3n de la aplicaci\u00f3n. Por ahora, s\u00f3lo hay que pulsar ENTER para aceptar los valores predeterminados. Instalar las dependencias para crear nuestro servicio de proxy 4 . En este caso utilizaremos Express 5 como servidor web y el m\u00f3dulo axios 6 . Instalar el express y guardarlo en la lista de dependencias 1 npm install express --save Instalar el axios y guardarlo en la lista de dependencias 1 npm install axios --save Al ejecutar estos comandos veremos que se crea una carpeta llamada node_modules donde se guardan los m\u00f3dulos instalados. Crear un archivo llamado app.js que servir\u00e1 de proxy con el servicio de Bicing. Copiar lo siguiente en este archivo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 var express = require ( express ); var app = express (); var axios = require ( axios ); var serverBicing = http://wservice.viabicing.cat/v2/stations ; app . use ( express . static ( public )); app . all ( /bicingjson/* , function ( req , res ) { console . log ( redirecting to Server2 ); var geojson = { type : FeatureCollection , features : [] }; axios . get ( serverBicing ). then ( function ( response ){ // handle success var stations = response . data . stations ; for ( var i = stations . length - 1 ; i = 0 ; i -- ) { var station = stations [ i ]; var feature = { type : Feature , properties : { altitude : station . altitude , bikes : station . bikes , id : station . id , nearbyStations : station . nearbyStations , slots : station . slots , status : station . status , streetName : station . streetName , streetNumber : station . streetNumber , type : station . type }, geometry : { type : Point , coordinates : [ station . longitude , station . latitude ] } }; geojson . features . push ( feature ); } res . send ( geojson ); }). catch ( function ( error ) { console . log ( error ); res . send ( error ); }); }); app . listen ( 3000 ); Probar que nuestro proxy est\u00e1 funcionando, escribiendo: 1 node app.js Abrir la url de nuestro proxy http://localhost:3000/bicingjson/ en el navegador. Crear una carpeta llamada public dentro de nuestra carpeta y mover el archivo index.html dentro de esa carpeta. Con esto ya podemos ver nuestra aplicaci\u00f3n del mapa servida desde un servidor web y no abriendola directamente como hab\u00edamos hecho hasta ahora. Escribir en el navegador http://localhost:3000 para ver nuestro mapa.","title":"Creaci\u00f3n del proxy"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/#modificar-el-visor","text":"Modificar el archivo index.html para que llame al proxy que hemos creado y cargue la capa de bicing. Escribir justo despues de la declaraci\u00f3n del mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : 6 , circle-color : #B42222 }, }); }); / script / body / html Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Actualizar los datos del mapa. Para actualizar los datos del mapa se debe recargar la capa de estaciones de bicing cada X tiempo. Para recargar la capa cada 3 segundos escribir los siguiente al final de la funci\u00f3n que se llama al terminar de cargar el estilo del mapa. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : 6 , circle-color : #B42222 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); / script / body / html Recargar la aplicaci\u00f3n y veremos los puntos de las estaciones de bicing. Si vamos a la pesta\u00f1a de red (network) en la consola de desarrollador del navegador podremos ver que cada 3 segundos se hace una llamada a nuestro proxy. Cambiar el estilo de la capa de estaciones de bicing. Para representar las estaciones con un estilo basado en los valores de algunos de sus atributos utilizar el data-driven style siguiendo la especificaci\u00f3n de estilo de Mapbox 7 . Modificar la propiedad paint de la capa y escribir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : [ interpolate , [ linear ], [ to-number , [ get , slots ]], 0 , 5 , 15 , 33 ], circle-color : [ interpolate , [ linear ], [ to-number , [ get , bikes ]], 0 , hsl(0, 88%, 55%) , 37 , hsl(108, 93%, 59%) ], circle-opacity : 0.86 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); / script / body / html Recargar la aplicaci\u00f3n y veremos el cambio de estilo de los puntos de las estaciones de bicing. Crear un popup para ver la informaci\u00f3n de la estaci\u00f3n al seleccionarla. Escribir despu\u00e9s de donde definimos el onload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : [ interpolate , [ linear ], [ to-number , [ get , slots ]], 0 , 5 , 15 , 33 ], circle-color : [ interpolate , [ linear ], [ to-number , [ get , bikes ]], 0 , hsl(0, 88%, 55%) , 37 , hsl(108, 93%, 59%) ], circle-opacity : 0.86 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); map . on ( click , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ bicing ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( div id=\\ popup\\ class=\\ popup\\ style=\\ z-index: 10;\\ h5 + feature . properties . id + /h5 + ul class=\\ list-group\\ + li class=\\ list-group-item\\ + feature . properties . streetName + /li + li class=\\ list-group-item\\ Bikes: + feature . properties . bikes + /li + li class=\\ list-group-item\\ slots: + feature . properties . slots + /li /ul /div ) . addTo ( map ); }); / script / body / html Recargar la p\u00e1gina y hacer click sobre alguna estaci\u00f3n para ver su informaci\u00f3n en tiempo real. Cambiar el tipo de cursor al pasar sobre una estaci\u00f3n. Escribir despu\u00e9s de donde definimos el onload 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 !DOCTYPE html html head title Servicio de Bicing realtime VectorTiles / title meta name = viewport content = initial-scale=1,maximum-scale=1,user-scalable=no / script src = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js / script link href = https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css rel = stylesheet / style body { margin : 0 ; padding : 0 ; } # map { position : absolute ; top : 0 ; bottom : 0 ; width : 100 % ; height : 100 % } / style / head body div id = map / div script type = text/javascript var map = new mapboxgl . Map ({ container : map , style : https://geoserveis.icgc.cat/contextmaps/icgc.json , center : [ 2.1777 , 41.3887 ], zoom : 13 , maxZoom : 14 , hash : true , }); map . on ( load , function () { //funcion que se llama al terminar de cargar el estilo del mapa //agregamos la fuente de datos al mapa map . addSource ( bicing-source , { type : geojson , data : http://localhost:3000/bicingjson/ }); //agregamos la capa con su estilo al mapa map . addLayer ({ id : bicing , type : circle , source : bicing-source , paint : { circle-radius : [ interpolate , [ linear ], [ to-number , [ get , slots ]], 0 , 5 , 15 , 33 ], circle-color : [ interpolate , [ linear ], [ to-number , [ get , bikes ]], 0 , hsl(0, 88%, 55%) , 37 , hsl(108, 93%, 59%) ], circle-opacity : 0.86 }, }); window . setInterval ( function () { map . getSource ( bicing-source ). setData ( http://localhost:3000/bicingjson/ ); }, 3000 ); }); map . on ( click , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ bicing ] }); // if the features have no info, return nothing if ( ! features . length ) { return ; } var feature = features [ 0 ]; // Populate the popup and set its coordinates // based on the feature found var popup = new mapboxgl . Popup () . setLngLat ( feature . geometry . coordinates ) . setHTML ( div id=\\ popup\\ class=\\ popup\\ style=\\ z-index: 10;\\ h5 + feature . properties . id + /h5 + ul class=\\ list-group\\ + li class=\\ list-group-item\\ + feature . properties . streetName + /li + li class=\\ list-group-item\\ Bikes: + feature . properties . bikes + /li + li class=\\ list-group-item\\ slots: + feature . properties . slots + /li /ul /div ) . addTo ( map ); }); // Use the same approach as above to indicate that the symbols are clickable // by changing the cursor style to pointer map . on ( mousemove , function ( e ) { var features = map . queryRenderedFeatures ( e . point , { layers : [ bicing ] }); map . getCanvas (). style . cursor = features . length ? pointer : ; }); / script / body / html Recargar la p\u00e1gina y pasar sobre alguna estaci\u00f3n para ver el cambio del cursor. mapa de servicio de bicing Ejercicio Cambiar el estilo de los puntos de las estaciones. Cambiar los rangos del tama\u00f1o del punto y cambiar el rango de colores.","title":"Modificar el visor"},{"location":"9_ejemplo_servicio_bicing_bcn_vt/#referencias","text":"https://es.wikipedia.org/wiki/GeoJSON https://www.mapbox.com/mapbox-gl-js/api/ https://nodejs.org/es/ https://es.wikipedia.org/wiki/Servidor_proxy http://expressjs.com/ https://github.com/axios/axios https://www.mapbox.com/mapbox-gl-js/style-spec","title":"Referencias"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/","text":"Welcome to SlickGrid Find documentation and examples in the wiki . UPDATE: March 5th, 2014 - I have too many things going on in my life right now to really give SlickGrid support and development the time and attention it deserves. I am not stopping it, but I will most likely be unresponsive for some time. Sorry. SlickGrid is an advanced JavaScript grid/spreadsheet component Some highlights: Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness) Extremely fast rendering speed Supports jQuery UI Themes Background post-rendering for richer cells Configurable customizable Full keyboard navigation Column resize/reorder/show/hide Column autosizing force-fit Pluggable cell formatters editors Support for editing and creating new rows. Grouping, filtering, custom aggregators, and more! Advanced detached multi-field editors with undo/redo support. \u201cGlobalEditorLock\u201d to manage concurrent edits in cases where multiple Views on a page can edit the same data. Support for millions of rows","title":"Welcome to SlickGrid"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/#welcome-to-slickgrid","text":"Find documentation and examples in the wiki . UPDATE: March 5th, 2014 - I have too many things going on in my life right now to really give SlickGrid support and development the time and attention it deserves. I am not stopping it, but I will most likely be unresponsive for some time. Sorry.","title":"Welcome to SlickGrid"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/#slickgrid-is-an-advanced-javascript-gridspreadsheet-component","text":"Some highlights: Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness) Extremely fast rendering speed Supports jQuery UI Themes Background post-rendering for richer cells Configurable customizable Full keyboard navigation Column resize/reorder/show/hide Column autosizing force-fit Pluggable cell formatters editors Support for editing and creating new rows. Grouping, filtering, custom aggregators, and more! Advanced detached multi-field editors with undo/redo support. \u201cGlobalEditorLock\u201d to manage concurrent edits in cases where multiple Views on a page can edit the same data. Support for millions of rows","title":"SlickGrid is an advanced JavaScript grid/spreadsheet component"}]}