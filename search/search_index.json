{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GeoServicios para Smarts Cities 2018-2019 M\u00e1ster en GeoInformaci\u00f3n MTIG 2018-2019. Temario: https://gss-mtig.github.io/gss-mtig-18-19/ Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData API servicios Open data (CKAN y SOCRATA) Conceptos Vector-Tiles Visualizaci\u00f3n con Kepler.gl Herramientas de visualizaci\u00f3n de datos Conceptos b\u00e1sicos de Geoservicios Servicios realtime Open data Ejemplo servicio bicing Barcelona (se podr\u00eda adaptar a vector tiles) Servicios realtime sensores Ejemplo sensores port Barcelona Ejemplo Sentilo ACA Geoservicios realtime Herramientas de visualizaci\u00f3n geoservicios Ejemplo de Geocodificador Ejemplo Is\u00f3cronas (cambiar por https://openrouteservice.org o https://graphhopper.com ) Ejemplo Creaci\u00f3n de geoservicio realtime para compartir ubicaci\u00f3n del usuario Ejemplo GTFS (Google transit) Autores Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Victor Pascual Ayats @sfggeogis , geostarter (ICGC)","title":"Home"},{"location":"#geoservicios-para-smarts-cities-2018-2019","text":"M\u00e1ster en GeoInformaci\u00f3n MTIG 2018-2019. Temario:","title":"GeoServicios para Smarts Cities 2018-2019"},{"location":"#httpsgss-mtiggithubiogss-mtig-18-19","text":"Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData API servicios Open data (CKAN y SOCRATA) Conceptos Vector-Tiles Visualizaci\u00f3n con Kepler.gl Herramientas de visualizaci\u00f3n de datos Conceptos b\u00e1sicos de Geoservicios Servicios realtime Open data Ejemplo servicio bicing Barcelona (se podr\u00eda adaptar a vector tiles) Servicios realtime sensores Ejemplo sensores port Barcelona Ejemplo Sentilo ACA Geoservicios realtime Herramientas de visualizaci\u00f3n geoservicios Ejemplo de Geocodificador Ejemplo Is\u00f3cronas (cambiar por https://openrouteservice.org o https://graphhopper.com ) Ejemplo Creaci\u00f3n de geoservicio realtime para compartir ubicaci\u00f3n del usuario Ejemplo GTFS (Google transit)","title":"https://gss-mtig.github.io/gss-mtig-18-19/"},{"location":"#autores","text":"Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Victor Pascual Ayats @sfggeogis , geostarter (ICGC)","title":"Autores"},{"location":"1_introduccion_a_las_smart_cities/","text":"Introducci\u00f3n a las Smart Cities A smart city is an urban area that uses different types of electronic data collection sensors to supply information used to manage assets and resources efficiently. This includes data collected from citizens, devices, and assets that is processed and analyzed to monitor and manage traffic and transportation systems, power plants, water supply networks, waste management, law enforcement, information systems, schools, libraries, hospitals, and other community services https://en.wikipedia.org/wiki/Smart_city Temario Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData Ver presentaci\u00f3n","title":"1. Introducci\u00f3n a las Smart Cities"},{"location":"1_introduccion_a_las_smart_cities/#introduccion-a-las-smart-cities","text":"A smart city is an urban area that uses different types of electronic data collection sensors to supply information used to manage assets and resources efficiently. This includes data collected from citizens, devices, and assets that is processed and analyzed to monitor and manage traffic and transportation systems, power plants, water supply networks, waste management, law enforcement, information systems, schools, libraries, hospitals, and other community services https://en.wikipedia.org/wiki/Smart_city Temario Introducci\u00f3n a las Smart Cities Conceptos Smart Cities Conceptos Open Data Conceptos sensores Tecnolog\u00edas OpenData","title":"Introducci\u00f3n a las Smart Cities"},{"location":"1_introduccion_a_las_smart_cities/#ver-presentacion","text":"","title":"Ver presentaci\u00f3n"},{"location":"2_conceptos_y_servicios_open_data/","text":"API servicios Open Data (CKAN y SOCRATA) Ejemplo API CKAN El API de CKAN http://docs.ckan.org/en/latest/api/index.html no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtrar datasets. En este ejemplo utilizaremos el m\u00e9todo resource_search para buscar datasets en cualquier portal de CKAN Para buscar en portales CKAN necesitamos saber la URL del portal , exemplo http://demo.ckan.org y a\u00f1adir el path del m\u00e9todo a utilizar /api/3/action/resource_search? http://demo.ckan.org/api/3/action/resource_search ? Descomprimiremos el archivo downloads/utilizacion-servicio-opendata.zip en nuestro espacio de trabajo. Ver ejemplos online Creaci\u00f3n de un buscador Dentro del directorio utilizacion-servicio-opendata creamos un archivo con el nombre de ckan.html . Abrimos el archivo ckan.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 !DOCTYPE html html head meta charset = UTF-8 title B\u00e0sic sample Resource Search API CKAN / title link rel = stylesheet href = javascripts/vendor/bootstrap/3.2.0/css/bootstrap.css / script type = text/javascript src = javascripts/vendor/jquery/1.7.1/jquery.js / script script type = text/javascript src = javascripts/vendor/bootstrap/3.2.0/js/bootstrap.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo ckan.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 div class = container h3 Resource Search example / h3 p Package Search br a target = _blank href = http://docs.ckan.org/en/latest/api/ http://docs.ckan.org/en/latest/api/ / a / p form div class = form-group label for = url_ckan Url: / label select id = url_ckan option value = http://demo.ckan.org/api/3/action/resource_search? ckan.org / option option value = http://old.datahub.io/api/3/action/resource_search? old.datahub.io / option / select / div div class = form-group label for = text_filter_ckan Filter u (name, descripton, format ) / u / label input type = text class = form-control id = text_filter_ckan value = name:wifi placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_ckan Num results / label input type = number size = 3 class = form-control id = num_results_ckan value = 5 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo ckan.html en el navegador. A\u00f1adimos justo encima de tag body el c\u00f3digo en JavaScript.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { var data = { rows : $ ( #num_results_ckan ). val (), query : $ ( #text_filter_ckan ). val () }; $ . ajax ({ url : $ ( #url_ckan ). val (), data : data , dataType : jsonp , success : function ( data ) { if ( data . success ) { $ ( #results ). html ( Total results found: + data . result . count ); $ ( #mygrid ). html ( ); if ( data . result . count = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . result . results , function ( index , value ) { $ ( #mygrid ). append ( li + value . name + : a href= + value . url + + value . url + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: + data . error . message ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); }) }); /script Abrimos p\u00e0gina ckan.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adir una o m\u00e1s URLs de otros portales de CKAN Note Ejercicio 2 : \u00bfC\u00f3mo har\u00edamos para qu\u00e9 en los resultados apareciera la fecha de creaci\u00f3n del dato? Ejemplos API SOCRATA El API de Socrata https://dev.socrata.com no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtra datasets. En este primer ejemplo utilizaremos la Discovery API https://socratadiscovery.docs.apiary.io/ para buscar datasets en cualquier portal de Socrata Descomprimiremos (ya hecho en ejercicio CKAN) el archivo utilizacion-servicio-opendata.zip en nuestro espacio de trabajo. Creaci\u00f3n de un buscador Dentro del directorio utilizacion-servicio-opendata creamos un archivo con el nombre de socrata.html . Abrimos el archivo socrata.html con un editor de texto y copiamos el siguiente c\u00f3digo.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 !DOCTYPE html html head meta charset = UTF-8 title Basic sample API Discovery SOCRATA / title link rel = stylesheet href = javascripts/vendor/bootstrap/3.2.0/css/bootstrap.css / script type = text/javascript src = javascripts/vendor/jquery/1.7.1/jquery.js / script script type = text/javascript src = javascripts/vendor/bootstrap/3.2.0/js/bootstrap.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo socrata.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 div class = container h3 SOCRATA Resource Search example / h3 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = Contracts placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo socrata.html en el navegador. A\u00f1adimos justo encima de tag /body el c\u00f3digo en JavaScript.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); function sendRequest () { var _data = { q : $ ( #text_filter_socrata ). val (), limit : $ ( #num_results_socrata ). val () }; $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . results , function ( index , value ) { $ ( #mygrid ). append ( li b + value . resource . name + /b ( + value . resource . type + ): a target= _blank href= + value . link + + value . link + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrata.html y lanzamos b\u00fasquedas Ejercicio 1 : \u00bfC\u00f3mo filtrar\u00edamos para qu\u00e9 s\u00f3lo ense\u00f1ara \"assets\" de tipo mapa? Creaci\u00f3n de un mapa para ver resultados de Socrata Dentro del directorio utilizacion-servicio-opendata creamos un archivo con el nombre de socrata_mapa.html . Abrimos el archivo socrata_mapa.html con un editor de texto y copiamos el siguiente c\u00f3digo.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 !DOCTYPE html html head meta charset = UTF-8 title Basic Leaflet Map sample API Discovery SOCRATA / title link rel = stylesheet href = javascripts/vendor/bootstrap/3.2.0/css/bootstrap.css / link rel = stylesheet href = javascripts/vendor/leaflet/0.7.7/leaflet.css / script type = text/javascript src = javascripts/vendor/jquery/1.7.1/jquery.js / script script type = text/javascript src = javascripts/vendor/bootstrap/3.2.0/js/bootstrap.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/leaflet.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/leaflet.ajax.min.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/spin.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/leaflet.spin.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo socrata_mapa.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 div class = container h3 SOCRATA Maps Resources / h3 div class = row div class = col-md-6 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = placeholder = text filter div class = checkbox label input type = checkbox id = chk_transparencia value = analisi.transparenciacatalunya.cat Only https://analisi.transparenciacatalunya.cat / label / div div Filter : only=maps / div / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 365px;overflow:auto / div / div div class = col-md-6 div id = map style = width:100%;height:700px / div / div / div Abrimos el archivo socrata_mapa.html en el navegador. A\u00f1adimos justo encima de tag body el c\u00f3digo en JavaScript.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 script $ . ajaxSetup ({ cache : true }); var map ; var geojsonLayer ; var _LL ; $ ( document ). ready ( function () { map = L . map ( map ). setView ([ 41.6863 , 1.8382 ], 8 ); esri = L . tileLayer ( http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} , { maxZoom : 17 , minZoom : 1 , attribution : Tiles \u00a9 Esri , }) osm = L . tileLayer ( http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png , { maxZoom : 19 , minZoom : 1 , attribution : OSM }). addTo ( map ); Stamen_Toner = L . tileLayer ( http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png , { attribution : Map tiles by a href= http://stamen.com Stamen Design /a , a href= http://creativecommons.org/licenses/by/3.0 CC BY 3.0 /a mdash; Map data copy; a href= http://www.openstreetmap.org/copyright OpenStreetMap /a , subdomains : abcd , minZoom : 0 , maxZoom : 20 }) var baseMaps = { Orto : esri , Mapa : osm , Toner : Stamen_Toner }; L . control . layers ( baseMaps , null ). addTo ( map ); L . control . scale (). addTo ( map ); $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); $ ( document ). on ( click , .btn-xs , function () { var attr = $ ( this ). attr ( data ); if ( attr attr . indexOf ( # ) != - 1 ) { var params = attr . split ( # ); var _url = https:// + params [ 1 ] + /api/views.json?method=getByResourceName name= + params [ 0 ]; $ . ajax ({ url : _url , method : GET , dataType : json , success : function ( data ) { if ( data . childViews ) { //var _url2 = https:// + params[1] + /resource/ + data.childViews[0] + .json?$limit=30 ; var _url2 = https:// + params [ 1 ] + /api/geospatial/ + data . childViews [ 0 ] + ?method=export format=GeoJSON ; sendRequestGEOJSON ( _url2 , true ); } else { var _url2 = http:// + params [ 1 ] + /resource/ + params [ 0 ] + .json?$limit=30 ; sendRequestGEOJSON ( _url2 , false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } else { alert ( No resource available ); } }); function clearLayers () { if ( map . hasLayer ( geojsonLayer )) { map . removeLayer ( geojsonLayer ); }; if ( map . hasLayer ( _LL )) { map . removeLayer ( _LL ); }; } function sendRequestGEOJSON ( _url2 , isGeoJson ) { map . spin ( true ); var stylePoint = { radius : 8 , fillColor : #ff7800 , color : #000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }; clearLayers (); $ . ajax ({ type : GET , url : _url2 , // jsonp: $jsonp , // dataType: jsonp , success : function ( response ) { if ( isGeoJson ) { geojsonLayer = L . geoJson ( response , { style : function ( feature ) { return { weight : 2 , color : #999 , opacity : 1 , fillColor : #B0DE5C , fillOpacity : 0.8 }; }, onEachFeature : popUp }). addTo ( map ); map . fitBounds ( geojsonLayer . getBounds ()); map . spin ( false ); } else { _LL = L . featureGroup () for ( var i = 0 ; i response . length ; i ++ ) { var marker = response [ i ]; if ( response [ i ]. location_1 ) { L . circleMarker ([ response [ i ]. location_1 . latitude , response [ i ]. location_1 . longitude ], stylePoint ). addTo ( _LL ); } else if ( response [ i ]. location ) { L . circleMarker ([ response [ i ]. location . latitude , response [ i ]. location . longitude ], stylePoint ). addTo ( _LL ); } else { $ ( #results ). html ( ERROR no locations found ); map . spin ( false ); } } _LL . addTo ( map ); map . panTo ( _LL . getBounds (). getCenter ()); map . spin ( false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); map . spin ( false ); } }); } function popUp ( f , l ) { var out = []; if ( f . properties ) { for ( key in f . properties ) { out . push ( key + : + f . properties [ key ]); } l . bindPopup ( out . join ( br / )); } } function sendRequest () { var _data = { limit : $ ( #num_results_socrata ). val (), only : maps }; console . info ( $ ( #chk_transparencia ). attr ( checked )); if ( $ ( #chk_transparencia ). attr ( checked )) { _data . domains = $ ( #chk_transparencia ). val (); } if ( $ ( #text_filter_socrata ). val () != ) { _data . q = $ ( #text_filter_socrata ). val (); } $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { var cList = $ ( ul ). appendTo ( #mygrid ); $ . each ( data . results , function ( index , value ) { $ ( li class= li b + value . resource . name + : /b + a target= _blank href= + value . link + Link /a + a class= btn btn-success btn-xs href= # data= + value . resource . id + # + value . metadata . domain + Map it /a ). appendTo ( cList ); }); } } else { console . info ( data ); $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrat_mapa.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adimos attribution y download_count a los resultados Note Ejercicio 2 : \u00bfCambiamos colores y estilos de los puntos del mapa? Referencias http://docs.ckan.org/en/latest/api/ http://ckan.org https://www.socrata.com http://docs.socratadiscovery.apiary.io","title":"2. API servicios Open data (CKAN y SOCRATA)"},{"location":"2_conceptos_y_servicios_open_data/#api-servicios-open-data-ckan-y-socrata","text":"","title":"API servicios Open Data (CKAN y SOCRATA)"},{"location":"2_conceptos_y_servicios_open_data/#ejemplo-api-ckan","text":"El API de CKAN http://docs.ckan.org/en/latest/api/index.html no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtrar datasets. En este ejemplo utilizaremos el m\u00e9todo resource_search para buscar datasets en cualquier portal de CKAN Para buscar en portales CKAN necesitamos saber la URL del portal , exemplo http://demo.ckan.org y a\u00f1adir el path del m\u00e9todo a utilizar /api/3/action/resource_search? http://demo.ckan.org/api/3/action/resource_search ? Descomprimiremos el archivo downloads/utilizacion-servicio-opendata.zip en nuestro espacio de trabajo. Ver ejemplos online","title":"Ejemplo API CKAN"},{"location":"2_conceptos_y_servicios_open_data/#creacion-de-un-buscador","text":"Dentro del directorio utilizacion-servicio-opendata creamos un archivo con el nombre de ckan.html . Abrimos el archivo ckan.html con un editor de texto y copiamos el siguiente c\u00f3digo. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 !DOCTYPE html html head meta charset = UTF-8 title B\u00e0sic sample Resource Search API CKAN / title link rel = stylesheet href = javascripts/vendor/bootstrap/3.2.0/css/bootstrap.css / script type = text/javascript src = javascripts/vendor/jquery/1.7.1/jquery.js / script script type = text/javascript src = javascripts/vendor/bootstrap/3.2.0/js/bootstrap.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo ckan.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 div class = container h3 Resource Search example / h3 p Package Search br a target = _blank href = http://docs.ckan.org/en/latest/api/ http://docs.ckan.org/en/latest/api/ / a / p form div class = form-group label for = url_ckan Url: / label select id = url_ckan option value = http://demo.ckan.org/api/3/action/resource_search? ckan.org / option option value = http://old.datahub.io/api/3/action/resource_search? old.datahub.io / option / select / div div class = form-group label for = text_filter_ckan Filter u (name, descripton, format ) / u / label input type = text class = form-control id = text_filter_ckan value = name:wifi placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_ckan Num results / label input type = number size = 3 class = form-control id = num_results_ckan value = 5 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo ckan.html en el navegador. A\u00f1adimos justo encima de tag body el c\u00f3digo en JavaScript.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { var data = { rows : $ ( #num_results_ckan ). val (), query : $ ( #text_filter_ckan ). val () }; $ . ajax ({ url : $ ( #url_ckan ). val (), data : data , dataType : jsonp , success : function ( data ) { if ( data . success ) { $ ( #results ). html ( Total results found: + data . result . count ); $ ( #mygrid ). html ( ); if ( data . result . count = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . result . results , function ( index , value ) { $ ( #mygrid ). append ( li + value . name + : a href= + value . url + + value . url + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: + data . error . message ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); }) }); /script Abrimos p\u00e0gina ckan.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adir una o m\u00e1s URLs de otros portales de CKAN Note Ejercicio 2 : \u00bfC\u00f3mo har\u00edamos para qu\u00e9 en los resultados apareciera la fecha de creaci\u00f3n del dato? Ejemplos API SOCRATA El API de Socrata https://dev.socrata.com no ofrece diferetes niveles y m\u00e9todos para poder buscar y filtra datasets. En este primer ejemplo utilizaremos la Discovery API https://socratadiscovery.docs.apiary.io/ para buscar datasets en cualquier portal de Socrata Descomprimiremos (ya hecho en ejercicio CKAN) el archivo utilizacion-servicio-opendata.zip en nuestro espacio de trabajo. Creaci\u00f3n de un buscador Dentro del directorio utilizacion-servicio-opendata creamos un archivo con el nombre de socrata.html . Abrimos el archivo socrata.html con un editor de texto y copiamos el siguiente c\u00f3digo.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 !DOCTYPE html html head meta charset = UTF-8 title Basic sample API Discovery SOCRATA / title link rel = stylesheet href = javascripts/vendor/bootstrap/3.2.0/css/bootstrap.css / script type = text/javascript src = javascripts/vendor/jquery/1.7.1/jquery.js / script script type = text/javascript src = javascripts/vendor/bootstrap/3.2.0/js/bootstrap.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo socrata.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 div class = container h3 SOCRATA Resource Search example / h3 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = Contracts placeholder = text filter / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 500px / div / div Abrimos el archivo socrata.html en el navegador. A\u00f1adimos justo encima de tag /body el c\u00f3digo en JavaScript.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 script $ . ajaxSetup ({ cache : true }); $ ( document ). ready ( function () { $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); function sendRequest () { var _data = { q : $ ( #text_filter_socrata ). val (), limit : $ ( #num_results_socrata ). val () }; $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { $ ( #mygrid ). append ( ul ); $ . each ( data . results , function ( index , value ) { $ ( #mygrid ). append ( li b + value . resource . name + /b ( + value . resource . type + ): a target= _blank href= + value . link + + value . link + /a ); $ ( #mygrid ). append ( /li ); }); $ ( #mygrid ). append ( /ul ); } } else { $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrata.html y lanzamos b\u00fasquedas Ejercicio 1 : \u00bfC\u00f3mo filtrar\u00edamos para qu\u00e9 s\u00f3lo ense\u00f1ara \"assets\" de tipo mapa? Creaci\u00f3n de un mapa para ver resultados de Socrata Dentro del directorio utilizacion-servicio-opendata creamos un archivo con el nombre de socrata_mapa.html . Abrimos el archivo socrata_mapa.html con un editor de texto y copiamos el siguiente c\u00f3digo.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 !DOCTYPE html html head meta charset = UTF-8 title Basic Leaflet Map sample API Discovery SOCRATA / title link rel = stylesheet href = javascripts/vendor/bootstrap/3.2.0/css/bootstrap.css / link rel = stylesheet href = javascripts/vendor/leaflet/0.7.7/leaflet.css / script type = text/javascript src = javascripts/vendor/jquery/1.7.1/jquery.js / script script type = text/javascript src = javascripts/vendor/bootstrap/3.2.0/js/bootstrap.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/leaflet.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/leaflet.ajax.min.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/spin.js / script script type = text/javascript src = javascripts/vendor/leaflet/0.7.7/leaflet.spin.min.js / script style # results { width : 100 % ; background-color : #f2f2f2 ; margin : 5 px ; } / style / head body / body / html Abrimos el archivo socrata_mapa.html en el navegador. A\u00f1adimos dentro del tag body la maquetaci\u00f3n HTML.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 div class = container h3 SOCRATA Maps Resources / h3 div class = row div class = col-md-6 p Discovery API br a target = _blank href = http://docs.socratadiscovery.apiary.io http://docs.socratadiscovery.apiary.io / a / p form div class = form-group div class = radio label input type = radio name = optionsRadios id = optionsRadios1 value = https://api.eu.socrata.com/api/catalog/v1 checked EU API Discovery / label / div div class = radio label input type = radio name = optionsRadios id = optionsRadios2 value = https://api.us.socrata.com/api/catalog/v1 US API Discovery / label / div / div div class = form-group label for = text_filter_socrata Filter u / u / label input type = text class = form-control id = text_filter_socrata value = placeholder = text filter div class = checkbox label input type = checkbox id = chk_transparencia value = analisi.transparenciacatalunya.cat Only https://analisi.transparenciacatalunya.cat / label / div div Filter : only=maps / div / div / form form class = form-inline div class = form-group label for = num_results_socrata Num results / label input type = number size = 3 class = form-control id = num_results_socrata value = 25 / div / form form div class = form-group button id = bt_send type = button class = btn btn-default btn-success Send / button / div / form hr div id = results / div div id = mygrid style = height: 365px;overflow:auto / div / div div class = col-md-6 div id = map style = width:100%;height:700px / div / div / div Abrimos el archivo socrata_mapa.html en el navegador. A\u00f1adimos justo encima de tag body el c\u00f3digo en JavaScript.:: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 script $ . ajaxSetup ({ cache : true }); var map ; var geojsonLayer ; var _LL ; $ ( document ). ready ( function () { map = L . map ( map ). setView ([ 41.6863 , 1.8382 ], 8 ); esri = L . tileLayer ( http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x} , { maxZoom : 17 , minZoom : 1 , attribution : Tiles \u00a9 Esri , }) osm = L . tileLayer ( http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png , { maxZoom : 19 , minZoom : 1 , attribution : OSM }). addTo ( map ); Stamen_Toner = L . tileLayer ( http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png , { attribution : Map tiles by a href= http://stamen.com Stamen Design /a , a href= http://creativecommons.org/licenses/by/3.0 CC BY 3.0 /a mdash; Map data copy; a href= http://www.openstreetmap.org/copyright OpenStreetMap /a , subdomains : abcd , minZoom : 0 , maxZoom : 20 }) var baseMaps = { Orto : esri , Mapa : osm , Toner : Stamen_Toner }; L . control . layers ( baseMaps , null ). addTo ( map ); L . control . scale (). addTo ( map ); $ ( #bt_send ). on ( click , function () { sendRequest (); }); $ ( #text_filter_socrata ). on ( keypress , function ( event ) { if ( event . which == 13 ) { sendRequest (); event . preventDefault (); } }); $ ( document ). on ( click , .btn-xs , function () { var attr = $ ( this ). attr ( data ); if ( attr attr . indexOf ( # ) != - 1 ) { var params = attr . split ( # ); var _url = https:// + params [ 1 ] + /api/views.json?method=getByResourceName name= + params [ 0 ]; $ . ajax ({ url : _url , method : GET , dataType : json , success : function ( data ) { if ( data . childViews ) { //var _url2 = https:// + params[1] + /resource/ + data.childViews[0] + .json?$limit=30 ; var _url2 = https:// + params [ 1 ] + /api/geospatial/ + data . childViews [ 0 ] + ?method=export format=GeoJSON ; sendRequestGEOJSON ( _url2 , true ); } else { var _url2 = http:// + params [ 1 ] + /resource/ + params [ 0 ] + .json?$limit=30 ; sendRequestGEOJSON ( _url2 , false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } else { alert ( No resource available ); } }); function clearLayers () { if ( map . hasLayer ( geojsonLayer )) { map . removeLayer ( geojsonLayer ); }; if ( map . hasLayer ( _LL )) { map . removeLayer ( _LL ); }; } function sendRequestGEOJSON ( _url2 , isGeoJson ) { map . spin ( true ); var stylePoint = { radius : 8 , fillColor : #ff7800 , color : #000 , weight : 1 , opacity : 1 , fillOpacity : 0.8 }; clearLayers (); $ . ajax ({ type : GET , url : _url2 , // jsonp: $jsonp , // dataType: jsonp , success : function ( response ) { if ( isGeoJson ) { geojsonLayer = L . geoJson ( response , { style : function ( feature ) { return { weight : 2 , color : #999 , opacity : 1 , fillColor : #B0DE5C , fillOpacity : 0.8 }; }, onEachFeature : popUp }). addTo ( map ); map . fitBounds ( geojsonLayer . getBounds ()); map . spin ( false ); } else { _LL = L . featureGroup () for ( var i = 0 ; i response . length ; i ++ ) { var marker = response [ i ]; if ( response [ i ]. location_1 ) { L . circleMarker ([ response [ i ]. location_1 . latitude , response [ i ]. location_1 . longitude ], stylePoint ). addTo ( _LL ); } else if ( response [ i ]. location ) { L . circleMarker ([ response [ i ]. location . latitude , response [ i ]. location . longitude ], stylePoint ). addTo ( _LL ); } else { $ ( #results ). html ( ERROR no locations found ); map . spin ( false ); } } _LL . addTo ( map ); map . panTo ( _LL . getBounds (). getCenter ()); map . spin ( false ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); map . spin ( false ); } }); } function popUp ( f , l ) { var out = []; if ( f . properties ) { for ( key in f . properties ) { out . push ( key + : + f . properties [ key ]); } l . bindPopup ( out . join ( br / )); } } function sendRequest () { var _data = { limit : $ ( #num_results_socrata ). val (), only : maps }; console . info ( $ ( #chk_transparencia ). attr ( checked )); if ( $ ( #chk_transparencia ). attr ( checked )) { _data . domains = $ ( #chk_transparencia ). val (); } if ( $ ( #text_filter_socrata ). val () != ) { _data . q = $ ( #text_filter_socrata ). val (); } $ . ajax ({ url : $ ( input:radio[name=optionsRadios]:checked ). val (), data : _data , method : GET , dataType : json , success : function ( data ) { console . info ( data ); if ( data ) { $ ( #results ). html ( Total results found: + data . resultSetSize ); $ ( #mygrid ). html ( ); if ( data . resultSetSize = 1 ) { var cList = $ ( ul ). appendTo ( #mygrid ); $ . each ( data . results , function ( index , value ) { $ ( li class= li b + value . resource . name + : /b + a target= _blank href= + value . link + Link /a + a class= btn btn-success btn-xs href= # data= + value . resource . id + # + value . metadata . domain + Map it /a ). appendTo ( cList ); }); } } else { console . info ( data ); $ ( #results ). html ( An error occured: ); } }, error : function ( xhr ) { $ ( #results ). html ( An error occured: + xhr . status + + xhr . statusText ); } }); } }); /script Abrimos p\u00e0gina socrat_mapa.html y lanzamos b\u00fasquedas Note Ejercicio 1 : A\u00f1adimos attribution y download_count a los resultados Note Ejercicio 2 : \u00bfCambiamos colores y estilos de los puntos del mapa? Referencias http://docs.ckan.org/en/latest/api/ http://ckan.org https://www.socrata.com http://docs.socratadiscovery.apiary.io","title":"Creaci\u00f3n de un buscador"},{"location":"3_conceptos_vector_tiles/","text":"Conceptos Vector Tiles Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos. Para saber m\u00e1s... https://geoinquiets.github.io/taller-vt Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1xini impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio, en torno a las teselas vectoriales. En comparaci\u00f3n con un mapa rasterizado en mosaico, la transferencia de datos tambi\u00e9n se reduce en gran medida, ya que los datos vectoriales suelen ser mucho m\u00e1s peque\u00f1os que un mapa de bits renderizado. Adem\u00e1s, el estilo se puede aplicar m\u00e1s tarde en el proceso, o incluso en el propio navegador, lo que permite una mayor flexibilidad en la forma en que se presentan los datos. Tambi\u00e9n es f\u00e1cil proporcionar interactividad con las caracter\u00edsticas de los mapas, ya que su representaci\u00f3n vectorial ya existe en el cliente.Otra ventaja es que se requiere una menor potencia de procesamiento del servidor centralizado, ya que la rasterizaci\u00f3n puede realizarse directamente en el cliente. Herramientas y recursos Fuente: https://github.com/mapbox/awesome-vector-tiles Parsers Generators vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt - geojson support. Clients Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps. Applications / Command line tools Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features. CLI Utilities mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL = 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead Mapbox GL JS Plugins gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps Servers tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2 Low-level utilities vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed Articles Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise. License","title":"3. Conceptos Vector Tiles"},{"location":"3_conceptos_vector_tiles/#conceptos-vector-tiles","text":"Vector Tiles es un formato para almacenar datos geogr\u00e1ficos en formato binario (Google Protobuf) y pensados para la visualizaci\u00f3n en navegadores web modernos que soporten webGL. Una tesela vectorial (vector tiles) contiene datos vectoriales georreferenciados (puede contener m\u00faltiples capas), recortados en teselas para facilitar su recuperaci\u00f3n. Son equivalentes a las teselas raster tradicionales (XYZ,WMTS, TMS) pero retornan datos vectoriales en lugar de una imagen. Cada conjunto de teselas vectoriales tiene su propio esquema. Un esquema consiste en nombres de capas, atributos, selecci\u00f3n de elementos. Para saber m\u00e1s... https://geoinquiets.github.io/taller-vt Las teselas vectoriales han sido utilizadas por el cliente Android de Google Maps desde diciembre de 2010 y en el cliente de escritorio desde 2013. Las teselas vectoriales para renderizar los datos de OpenStreetMap se propusieron por primera vez en marzo de 2013 y est\u00e1n soportadas por Mapnik, el renderizador de datos de OpenStreetMap m\u00e1s utilizado. Mapbox, proveedor comercial de herramientas de cartograf\u00eda personalizada y de hosting, es el m\u00e1xini impulsor de esta tecnologia y ha centrado su herramienta de cartograf\u00eda, Mapbox Studio, en torno a las teselas vectoriales. En comparaci\u00f3n con un mapa rasterizado en mosaico, la transferencia de datos tambi\u00e9n se reduce en gran medida, ya que los datos vectoriales suelen ser mucho m\u00e1s peque\u00f1os que un mapa de bits renderizado. Adem\u00e1s, el estilo se puede aplicar m\u00e1s tarde en el proceso, o incluso en el propio navegador, lo que permite una mayor flexibilidad en la forma en que se presentan los datos. Tambi\u00e9n es f\u00e1cil proporcionar interactividad con las caracter\u00edsticas de los mapas, ya que su representaci\u00f3n vectorial ya existe en el cliente.Otra ventaja es que se requiere una menor potencia de procesamiento del servidor centralizado, ya que la rasterizaci\u00f3n puede realizarse directamente en el cliente.","title":"Conceptos Vector Tiles"},{"location":"3_conceptos_vector_tiles/#herramientas-y-recursos","text":"Fuente: https://github.com/mapbox/awesome-vector-tiles","title":"Herramientas y recursos"},{"location":"3_conceptos_vector_tiles/#parsers-generators","text":"vector-tile-js - Parses vector tiles with JavaScript. mapnik-vector-tile - C++ vector tile read/write implementation on top of Mapnik. mbtiles-cpp - C++ library for decoding of mbtiles and vector data into function callbacks. vector-tile-py - Python tool to convert a Mapnik vector tile to GeoJSON node-mapnik - Node.js API for vector tiles which depends on mapnik-vector-tile vector-tile-cs - Parses vector tiles with C# (native C# implementation, no dependencies). mapbox-vector-tile-cs - Parses vector tiles with C# (uses protobuf-net). tilelive-bridge - Implements Tilelive API for creating vector tiles from traditional Mapnik datasources in Node.js. tilelive-vector - Implements Tilelive API for reading vector tiles and rendering to image tiles in Node.js. mapbox-vector-tile is a Python package for vector tile encoding. Used in Mapzen's vector tile service tileserver and TileStache. :warning: Only support V1 Tile spec and not V2, no longer maintained geojson-vt - Slice GeoJSON into vector tiles on the fly in the browser. java-vector-tile - A java encoder and decoder for vector tiles. mapbox-vector-tile-java - Encode and decode v2.1 Mapbox Vector Tiles. Convert JTS Geometry to and from MVT features, including simple user data support. Utility functions for converting world coordinates to MVT coordinates and clipping to a tile envelope. cached-vector-tile - An alternative implementation of the vector-tile-js interface, backed by plain JS objects/arrays rather than parsed-on-demand protobuf data. Trades away memory efficiency for faster feature.loadGeometry() calls. tilegrinder - A helper library for applying a data altering function on each vector tile in an MBTiles, using the native protobuf wrapper for de- and encoding, recompressing the results and storing them either in an MBTiles or as single files. SwiftVectorTiles - A Swift encoder for vector tiles according to the Mapbox vector tile spec. orb - A Go geometry library with mvt - geojson support.","title":"Parsers &amp; Generators"},{"location":"3_conceptos_vector_tiles/#clients","text":"Mapbox GL Native - C++/OpenGL vector maps library with native SDKs for Android, iOS, Node.js, macOS, and Qt Mapbox GL JS - JavaScript/WebGL vector maps library. OpenLayers 3 - JavaScript vector raster library. WhirlyGlobe/Maply - Objective C code that is able to read and render vector tiles(and style with mapnik xml) on iOS devices. Leaflet.MapboxVectorTile is able to read PBF MapboxVectorTiles from a REST endpoint and render them as a TileLayer on a Leaflet Map. Use this option if you want to utilize vector tiles on a standard Leaflet web map without needing WebGL. CARTO Mobile SDK - C++ maps library focused on offline features, for iOS, Android, Windows Phone and Xamarin with bindings for Java, Objective-C and C#. Based on Nutiteq Maps SDK , but open source and uses CartoCSS. Mapzen Tangram - JavaScript library for rendering 2D 3D maps live in a web browser with WebGL, supports MVT, GeoJSON, TopoJSON Mapzen Tangram-es - C++ library for rendering 2D and 3D maps using OpenGL ES 2 with custom styling and interactions mapbox-gl-leaflet - Create Mapbox GL layers in Leaflet react-native-mapbox-gl - Render Mapbox GL maps from React applications hoverboard - Render vector tiles on canvas with Leaflet 0.7.x (supports GeoJSON, TopoJSON, and protobuf) :warning: no longer maintained Leaflet.VectorGrid - Display gridded vector data (sliced GeoJSON, TopoJSON or Mapbox Vector Tiles) in Leaflet 1.0.0 ArcGIS API for JavaScript - Draw vector tile layers as part of your web map. Rendering done via mapbox-gl-js integration. mapscii - A Vector Tile to Braille and ASCII renderer for xterm-compatible terminals Unofficial Mapbox GL Native bindings for Qt QML - Qt QML bindings for Qt 5.6 and higher. Mapbox-vector-tiles-basic-js-renderer - A fork of mapbox-gl-js giving you full control over rendering of specific tiles, also provides vector tile overlay for google maps.","title":"Clients"},{"location":"3_conceptos_vector_tiles/#applications-command-line-tools","text":"Mapbox Studio - Web design studio for creating and styling vector tiles. Mapbox Studio Classic - Desktop design studio for both creating vector tiles from raw geodata and for rendering them on-the-fly into image tiles. Internally uses tilelive.js modules to handle vector tiles (see tilelive-bridge and tilelive-vector ) :warning: use Mapbox Studio instead. kosmtik - Design maps with CartoCSS and Mapnik. ArcGIS Pro - Generate vector tiles from maps authored in ArcGIS Pro or imported from ArcMap. MVT Styler - map style editor for vector tiles. Maputnik - A visual style editor for the Mapbox GL style specification. QGIS Vector Tiles Reader - QGIS Python plugin which reads Mapbox Vector Tiles from local MBTiles file or remote mapbox-gl-inspect - Plugin for Mapbox GL JS to view the view and inspect VT features.","title":"Applications / Command line tools"},{"location":"3_conceptos_vector_tiles/#cli-utilities","text":"mbview - Watch MBTiles in your localhost. View tiles in a basic Mapbox GL JS webapp locally tippecanoe - Build vector tilesets from large collections of GeoJSON features. tilemaker - Command line tool to produce vector tiles directly from an .osm.pbf extract without an intermediate database. mapbox-filter - Filter MBTiles according to Mapbox GL JS styles, shrink MBTiles directly, serve locally over http, publish to S3-compatibile storage vector-tiles-producer Command line tool in C++ to creates vector tiles for a given area at chosen zoom levels using a Mapnik XML. :warning: no longer maintained vt-geojson - decodes vector tiles to GeoJSON FeatureCollections tl - An alternate command line interface to tilelive tileshrink - Reduce the layer extent and simplify the resulting geometries of all vector tiles in an MBTiles tiler @GeoVation - Command line tool for converting GeoJSON, Shapefiles or PostGIS layer to raw Vector Tiles (or MBTiles) tiler @thomersch - Command line tool to convert GeoJSON to Vector Tiles (written in Go language). geojson2mvt - npm package for building a static vector tile tree for given xyz bounds from a geojson file (uses geojson-vt ) OGR MVT and MBTiles - The GDAL/OGR MVT and MBTILES drivers can be used to read and write vector tiles, respectively as tileset on the filesystem or in a mbtiles container (GDAL = 2.3.0) MBUtil - Import and export MBTiles to disk :warning: no longer maintained Datamaps C application that can be used to create vector tiles and store them in an mbtiles. See the render-vector command. :warning: no longer maintained, use tippecanoe instead","title":"CLI Utilities"},{"location":"3_conceptos_vector_tiles/#mapbox-gl-js-plugins","text":"gl-draw - Adds support for drawing and editing features on Mapbox GL JS maps","title":"Mapbox GL JS Plugins"},{"location":"3_conceptos_vector_tiles/#servers","text":"tessera - Supports serving and rendering vector tiles. Uses the same core libraries as Mapbox Studio. tessella - lightweight Node.js Mapbox Vector Tiles server. Inspired by tessera. tilestrata - with tilestrata-vt, it can generate Mapnik Vector Tiles; with tilestrata-postgismvt , it can serve Mapbox Vector Tiles from a PostGIS db Utilery Server to generate vector tiles from PostGIS queries. Python based :warning: no longer maintained tileserver Mapzen Vector Tile Service. TileStache added support for Mapbox Vector tiles via .pbf extension requests. Kartotherian Wikipedia tile server with Tilerator backend tile pre-generator ArcGIS Online - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript Portal for ArcGIS - Supports serving vector tiles and rendering in the mapping application powered by the ArcGIS API for JavaScript tilesplash - A light and quick nodejs webserver for serving topojson or mapbox vector tiles from a postgis backend go-vtile-example - An example server written in Go Tegola - A MVT server written in pure Go that supports serving tiles from a PostGIS data provider. t-rex - MVT server in a single executable written in Rust. Serves tiles from PostGIS supporting custom tile grids. OSM Scout Server - Maps server providing vector and raster tiles, geocoder, and router. Designed to be used on Linux (mobile and PC) to provide offline maps; written in C++ postserve - A small Python based tileserver using ST_AsMVT and ST_AsMVTGeom to generate vector tiles on the fly. Designed for use with PostGIS 2.4 and the OpenMapTiles project SpatialServer (PGRestAPI) - A multi-purpose GeoSpatial NodeJS web server created at SpatialDev that not only serves MBTiles stuffed with vector tiles, it can also cut vector tiles on the fly from a PostGIS database. :warning: No longer maintained. OpenMapTiles - Set of open-source tools for self-hosting of OpenStreetMap maps in more than 50 languages. It provides both raster as well as vector tiles, WMS and WMTS services for GIS programs, support for JavaScript viewers and mobile SDK. Hastile - Haskell web server using PostGIS to deliver vector tiles. MapServer - Open Source platform for publishing spatial data and interactive mapping applications to the web. MVT output available in 7.2","title":"Servers"},{"location":"3_conceptos_vector_tiles/#low-level-utilities","text":"vt-pbf serialize JavaScript objects representing vector tiles into binary Protocol Buffer encodings of vector tiles vtzero - minimalist vector tile decoder and encoder in C++ mvt-fixtures - a suite of valid and invalid test fixtures according to the Mapbox Vector Tile spec versions. Includes simplified unit test fixtures and real-world fixtures to test your encoders and decoders. zellige - command line utility written to convert GeoJSON to MVT. mapbox-gl-function - Mapbox GL style function evaluator :warning: now maintained as party of mapbox-gl-js mapbox-gl-filter-simplify - Simplifies and complexifies filters in Mapbox GL Styles :warning: removed","title":"Low-level utilities"},{"location":"3_conceptos_vector_tiles/#articles","text":"Vector tiles remixed - guide to using tilemaker to generating vector tiles Build Your Own Static Vector Tile Pipeline - guide transforming, encoding and hosting tiles in the cloud; using ogr2ogr + tippecanoe + Mapbox GL JS Using the new MVT function in PostGIS - Building a vector tile service with PostGIS, express, and pg-promise.","title":"Articles"},{"location":"3_conceptos_vector_tiles/#license","text":"","title":"License"},{"location":"4_visualizacion_kepler/","text":"Visualizaci\u00f3n con Kepler.gl Kepler.gl desrrollada por Uber, en u principio para uso interno, para analizar y visualizar sus propios datos. Es una aplicaci\u00f3n basada en web GL de alto rendimiento y agn\u00f3stica de datos para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3n a gran escala. Construido en la parte superior de deck.gl, kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales sobre la marcha. Ejercicio de visualizaci\u00f3n con Kepler.gl !!! Note Queremos ver d\u00f3nde hay m\u00e1s accidentes Descargamos dataset CSV de OpenData BCN Vamos a http://kepler.gl/#/demo -- A\u00f1adimos csv 1 2 3 4 5 * Add Layer -- gt;Type Hexbin * Columns Latitud Longuitud * Color Scale Qunatize * Hexagon radius 0.1 * Coverage 0.75 Info Continuamos a\u00f1adiendo m\u00e1s capas y mapas bases","title":"4. Visualizaci\u00f3n con Kepler.gl"},{"location":"4_visualizacion_kepler/#visualizacion-con-keplergl","text":"Kepler.gl desrrollada por Uber, en u principio para uso interno, para analizar y visualizar sus propios datos. Es una aplicaci\u00f3n basada en web GL de alto rendimiento y agn\u00f3stica de datos para la exploraci\u00f3n visual de conjuntos de datos de geolocalizaci\u00f3n a gran escala. Construido en la parte superior de deck.gl, kepler.gl puede representar millones de puntos que representan miles de viajes y realizar agregaciones espaciales sobre la marcha.","title":"Visualizaci\u00f3n con Kepler.gl"},{"location":"4_visualizacion_kepler/#ejercicio-de-visualizacion-con-keplergl","text":"!!! Note Queremos ver d\u00f3nde hay m\u00e1s accidentes Descargamos dataset CSV de OpenData BCN Vamos a http://kepler.gl/#/demo -- A\u00f1adimos csv 1 2 3 4 5 * Add Layer -- gt;Type Hexbin * Columns Latitud Longuitud * Color Scale Qunatize * Hexagon radius 0.1 * Coverage 0.75 Info Continuamos a\u00f1adiendo m\u00e1s capas y mapas bases","title":"Ejercicio de visualizaci\u00f3n con Kepler.gl"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/","text":"Welcome to SlickGrid Find documentation and examples in the wiki . UPDATE: March 5th, 2014 - I have too many things going on in my life right now to really give SlickGrid support and development the time and attention it deserves. I am not stopping it, but I will most likely be unresponsive for some time. Sorry. SlickGrid is an advanced JavaScript grid/spreadsheet component Some highlights: Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness) Extremely fast rendering speed Supports jQuery UI Themes Background post-rendering for richer cells Configurable customizable Full keyboard navigation Column resize/reorder/show/hide Column autosizing force-fit Pluggable cell formatters editors Support for editing and creating new rows. Grouping, filtering, custom aggregators, and more! Advanced detached multi-field editors with undo/redo support. \u201cGlobalEditorLock\u201d to manage concurrent edits in cases where multiple Views on a page can edit the same data. Support for millions of rows","title":"Welcome to SlickGrid"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/#welcome-to-slickgrid","text":"Find documentation and examples in the wiki . UPDATE: March 5th, 2014 - I have too many things going on in my life right now to really give SlickGrid support and development the time and attention it deserves. I am not stopping it, but I will most likely be unresponsive for some time. Sorry.","title":"Welcome to SlickGrid"},{"location":"ejemplos/utilizacion-servicio-opendata/javascripts/vendor/slickgrid/2.2/#slickgrid-is-an-advanced-javascript-gridspreadsheet-component","text":"Some highlights: Adaptive virtual scrolling (handle hundreds of thousands of rows with extreme responsiveness) Extremely fast rendering speed Supports jQuery UI Themes Background post-rendering for richer cells Configurable customizable Full keyboard navigation Column resize/reorder/show/hide Column autosizing force-fit Pluggable cell formatters editors Support for editing and creating new rows. Grouping, filtering, custom aggregators, and more! Advanced detached multi-field editors with undo/redo support. \u201cGlobalEditorLock\u201d to manage concurrent edits in cases where multiple Views on a page can edit the same data. Support for millions of rows","title":"SlickGrid is an advanced JavaScript grid/spreadsheet component"}]}